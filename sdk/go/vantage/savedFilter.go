// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vantage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SavedFilter.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-vantage/sdk/go/vantage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vantage.NewSavedFilter(ctx, "demoFilter", &vantage.SavedFilterArgs{
//				Filter: pulumi.String("(costs.provider = 'aws')"),
//				Title:  pulumi.String("Demo Saved Filter"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SavedFilter struct {
	pulumi.CustomResourceState

	// VQL Query used for this saved filter.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// Title of the Saved Filter
	Title pulumi.StringOutput `pulumi:"title"`
	// Unique saved filter identifier
	Token pulumi.StringOutput `pulumi:"token"`
	// Workspace token to add the saved filter into.
	WorkspaceToken pulumi.StringOutput `pulumi:"workspaceToken"`
}

// NewSavedFilter registers a new resource with the given unique name, arguments, and options.
func NewSavedFilter(ctx *pulumi.Context,
	name string, args *SavedFilterArgs, opts ...pulumi.ResourceOption) (*SavedFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SavedFilter
	err := ctx.RegisterResource("vantage:index/savedFilter:SavedFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSavedFilter gets an existing SavedFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSavedFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SavedFilterState, opts ...pulumi.ResourceOption) (*SavedFilter, error) {
	var resource SavedFilter
	err := ctx.ReadResource("vantage:index/savedFilter:SavedFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SavedFilter resources.
type savedFilterState struct {
	// VQL Query used for this saved filter.
	Filter *string `pulumi:"filter"`
	// Title of the Saved Filter
	Title *string `pulumi:"title"`
	// Unique saved filter identifier
	Token *string `pulumi:"token"`
	// Workspace token to add the saved filter into.
	WorkspaceToken *string `pulumi:"workspaceToken"`
}

type SavedFilterState struct {
	// VQL Query used for this saved filter.
	Filter pulumi.StringPtrInput
	// Title of the Saved Filter
	Title pulumi.StringPtrInput
	// Unique saved filter identifier
	Token pulumi.StringPtrInput
	// Workspace token to add the saved filter into.
	WorkspaceToken pulumi.StringPtrInput
}

func (SavedFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*savedFilterState)(nil)).Elem()
}

type savedFilterArgs struct {
	// VQL Query used for this saved filter.
	Filter *string `pulumi:"filter"`
	// Title of the Saved Filter
	Title string `pulumi:"title"`
	// Workspace token to add the saved filter into.
	WorkspaceToken *string `pulumi:"workspaceToken"`
}

// The set of arguments for constructing a SavedFilter resource.
type SavedFilterArgs struct {
	// VQL Query used for this saved filter.
	Filter pulumi.StringPtrInput
	// Title of the Saved Filter
	Title pulumi.StringInput
	// Workspace token to add the saved filter into.
	WorkspaceToken pulumi.StringPtrInput
}

func (SavedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*savedFilterArgs)(nil)).Elem()
}

type SavedFilterInput interface {
	pulumi.Input

	ToSavedFilterOutput() SavedFilterOutput
	ToSavedFilterOutputWithContext(ctx context.Context) SavedFilterOutput
}

func (*SavedFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**SavedFilter)(nil)).Elem()
}

func (i *SavedFilter) ToSavedFilterOutput() SavedFilterOutput {
	return i.ToSavedFilterOutputWithContext(context.Background())
}

func (i *SavedFilter) ToSavedFilterOutputWithContext(ctx context.Context) SavedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SavedFilterOutput)
}

// SavedFilterArrayInput is an input type that accepts SavedFilterArray and SavedFilterArrayOutput values.
// You can construct a concrete instance of `SavedFilterArrayInput` via:
//
//	SavedFilterArray{ SavedFilterArgs{...} }
type SavedFilterArrayInput interface {
	pulumi.Input

	ToSavedFilterArrayOutput() SavedFilterArrayOutput
	ToSavedFilterArrayOutputWithContext(context.Context) SavedFilterArrayOutput
}

type SavedFilterArray []SavedFilterInput

func (SavedFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SavedFilter)(nil)).Elem()
}

func (i SavedFilterArray) ToSavedFilterArrayOutput() SavedFilterArrayOutput {
	return i.ToSavedFilterArrayOutputWithContext(context.Background())
}

func (i SavedFilterArray) ToSavedFilterArrayOutputWithContext(ctx context.Context) SavedFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SavedFilterArrayOutput)
}

// SavedFilterMapInput is an input type that accepts SavedFilterMap and SavedFilterMapOutput values.
// You can construct a concrete instance of `SavedFilterMapInput` via:
//
//	SavedFilterMap{ "key": SavedFilterArgs{...} }
type SavedFilterMapInput interface {
	pulumi.Input

	ToSavedFilterMapOutput() SavedFilterMapOutput
	ToSavedFilterMapOutputWithContext(context.Context) SavedFilterMapOutput
}

type SavedFilterMap map[string]SavedFilterInput

func (SavedFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SavedFilter)(nil)).Elem()
}

func (i SavedFilterMap) ToSavedFilterMapOutput() SavedFilterMapOutput {
	return i.ToSavedFilterMapOutputWithContext(context.Background())
}

func (i SavedFilterMap) ToSavedFilterMapOutputWithContext(ctx context.Context) SavedFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SavedFilterMapOutput)
}

type SavedFilterOutput struct{ *pulumi.OutputState }

func (SavedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SavedFilter)(nil)).Elem()
}

func (o SavedFilterOutput) ToSavedFilterOutput() SavedFilterOutput {
	return o
}

func (o SavedFilterOutput) ToSavedFilterOutputWithContext(ctx context.Context) SavedFilterOutput {
	return o
}

// VQL Query used for this saved filter.
func (o SavedFilterOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedFilter) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// Title of the Saved Filter
func (o SavedFilterOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedFilter) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Unique saved filter identifier
func (o SavedFilterOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedFilter) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Workspace token to add the saved filter into.
func (o SavedFilterOutput) WorkspaceToken() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedFilter) pulumi.StringOutput { return v.WorkspaceToken }).(pulumi.StringOutput)
}

type SavedFilterArrayOutput struct{ *pulumi.OutputState }

func (SavedFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SavedFilter)(nil)).Elem()
}

func (o SavedFilterArrayOutput) ToSavedFilterArrayOutput() SavedFilterArrayOutput {
	return o
}

func (o SavedFilterArrayOutput) ToSavedFilterArrayOutputWithContext(ctx context.Context) SavedFilterArrayOutput {
	return o
}

func (o SavedFilterArrayOutput) Index(i pulumi.IntInput) SavedFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SavedFilter {
		return vs[0].([]*SavedFilter)[vs[1].(int)]
	}).(SavedFilterOutput)
}

type SavedFilterMapOutput struct{ *pulumi.OutputState }

func (SavedFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SavedFilter)(nil)).Elem()
}

func (o SavedFilterMapOutput) ToSavedFilterMapOutput() SavedFilterMapOutput {
	return o
}

func (o SavedFilterMapOutput) ToSavedFilterMapOutputWithContext(ctx context.Context) SavedFilterMapOutput {
	return o
}

func (o SavedFilterMapOutput) MapIndex(k pulumi.StringInput) SavedFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SavedFilter {
		return vs[0].(map[string]*SavedFilter)[vs[1].(string)]
	}).(SavedFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SavedFilterInput)(nil)).Elem(), &SavedFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*SavedFilterArrayInput)(nil)).Elem(), SavedFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SavedFilterMapInput)(nil)).Elem(), SavedFilterMap{})
	pulumi.RegisterOutputType(SavedFilterOutput{})
	pulumi.RegisterOutputType(SavedFilterArrayOutput{})
	pulumi.RegisterOutputType(SavedFilterMapOutput{})
}
