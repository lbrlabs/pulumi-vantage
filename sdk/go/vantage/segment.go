// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vantage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Segment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-vantage/sdk/go/vantage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vantage.NewSegment(ctx, "demoSegment", &vantage.SegmentArgs{
//				Description:      pulumi.String("This is still a demo segment"),
//				Filter:           pulumi.String("(costs.provider = 'aws' AND tags.name = NULL)"),
//				Priority:         pulumi.Int(50),
//				Title:            pulumi.String("Demo Segment"),
//				TrackUnallocated: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Segment struct {
	pulumi.CustomResourceState

	// The description of the Segment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
	ParentSegmentToken pulumi.StringOutput `pulumi:"parentSegmentToken"`
	// The priority of the Segment.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The title of the Segment.
	Title pulumi.StringOutput `pulumi:"title"`
	// Unique segment identifier
	Token pulumi.StringOutput `pulumi:"token"`
	// Whether or not to track unallocated resources in this Segment.
	TrackUnallocated pulumi.BoolOutput `pulumi:"trackUnallocated"`
	// Workspace token to add the segment to.
	WorkspaceToken pulumi.StringOutput `pulumi:"workspaceToken"`
}

// NewSegment registers a new resource with the given unique name, arguments, and options.
func NewSegment(ctx *pulumi.Context,
	name string, args *SegmentArgs, opts ...pulumi.ResourceOption) (*Segment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Segment
	err := ctx.RegisterResource("vantage:index/segment:Segment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSegment gets an existing Segment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSegment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SegmentState, opts ...pulumi.ResourceOption) (*Segment, error) {
	var resource Segment
	err := ctx.ReadResource("vantage:index/segment:Segment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Segment resources.
type segmentState struct {
	// The description of the Segment.
	Description *string `pulumi:"description"`
	// The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
	Filter *string `pulumi:"filter"`
	// The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
	ParentSegmentToken *string `pulumi:"parentSegmentToken"`
	// The priority of the Segment.
	Priority *int `pulumi:"priority"`
	// The title of the Segment.
	Title *string `pulumi:"title"`
	// Unique segment identifier
	Token *string `pulumi:"token"`
	// Whether or not to track unallocated resources in this Segment.
	TrackUnallocated *bool `pulumi:"trackUnallocated"`
	// Workspace token to add the segment to.
	WorkspaceToken *string `pulumi:"workspaceToken"`
}

type SegmentState struct {
	// The description of the Segment.
	Description pulumi.StringPtrInput
	// The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
	Filter pulumi.StringPtrInput
	// The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
	ParentSegmentToken pulumi.StringPtrInput
	// The priority of the Segment.
	Priority pulumi.IntPtrInput
	// The title of the Segment.
	Title pulumi.StringPtrInput
	// Unique segment identifier
	Token pulumi.StringPtrInput
	// Whether or not to track unallocated resources in this Segment.
	TrackUnallocated pulumi.BoolPtrInput
	// Workspace token to add the segment to.
	WorkspaceToken pulumi.StringPtrInput
}

func (SegmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentState)(nil)).Elem()
}

type segmentArgs struct {
	// The description of the Segment.
	Description *string `pulumi:"description"`
	// The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
	Filter *string `pulumi:"filter"`
	// The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
	ParentSegmentToken *string `pulumi:"parentSegmentToken"`
	// The priority of the Segment.
	Priority *int `pulumi:"priority"`
	// The title of the Segment.
	Title string `pulumi:"title"`
	// Whether or not to track unallocated resources in this Segment.
	TrackUnallocated *bool `pulumi:"trackUnallocated"`
	// Workspace token to add the segment to.
	WorkspaceToken *string `pulumi:"workspaceToken"`
}

// The set of arguments for constructing a Segment resource.
type SegmentArgs struct {
	// The description of the Segment.
	Description pulumi.StringPtrInput
	// The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
	Filter pulumi.StringPtrInput
	// The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
	ParentSegmentToken pulumi.StringPtrInput
	// The priority of the Segment.
	Priority pulumi.IntPtrInput
	// The title of the Segment.
	Title pulumi.StringInput
	// Whether or not to track unallocated resources in this Segment.
	TrackUnallocated pulumi.BoolPtrInput
	// Workspace token to add the segment to.
	WorkspaceToken pulumi.StringPtrInput
}

func (SegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentArgs)(nil)).Elem()
}

type SegmentInput interface {
	pulumi.Input

	ToSegmentOutput() SegmentOutput
	ToSegmentOutputWithContext(ctx context.Context) SegmentOutput
}

func (*Segment) ElementType() reflect.Type {
	return reflect.TypeOf((**Segment)(nil)).Elem()
}

func (i *Segment) ToSegmentOutput() SegmentOutput {
	return i.ToSegmentOutputWithContext(context.Background())
}

func (i *Segment) ToSegmentOutputWithContext(ctx context.Context) SegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentOutput)
}

// SegmentArrayInput is an input type that accepts SegmentArray and SegmentArrayOutput values.
// You can construct a concrete instance of `SegmentArrayInput` via:
//
//	SegmentArray{ SegmentArgs{...} }
type SegmentArrayInput interface {
	pulumi.Input

	ToSegmentArrayOutput() SegmentArrayOutput
	ToSegmentArrayOutputWithContext(context.Context) SegmentArrayOutput
}

type SegmentArray []SegmentInput

func (SegmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Segment)(nil)).Elem()
}

func (i SegmentArray) ToSegmentArrayOutput() SegmentArrayOutput {
	return i.ToSegmentArrayOutputWithContext(context.Background())
}

func (i SegmentArray) ToSegmentArrayOutputWithContext(ctx context.Context) SegmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentArrayOutput)
}

// SegmentMapInput is an input type that accepts SegmentMap and SegmentMapOutput values.
// You can construct a concrete instance of `SegmentMapInput` via:
//
//	SegmentMap{ "key": SegmentArgs{...} }
type SegmentMapInput interface {
	pulumi.Input

	ToSegmentMapOutput() SegmentMapOutput
	ToSegmentMapOutputWithContext(context.Context) SegmentMapOutput
}

type SegmentMap map[string]SegmentInput

func (SegmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Segment)(nil)).Elem()
}

func (i SegmentMap) ToSegmentMapOutput() SegmentMapOutput {
	return i.ToSegmentMapOutputWithContext(context.Background())
}

func (i SegmentMap) ToSegmentMapOutputWithContext(ctx context.Context) SegmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentMapOutput)
}

type SegmentOutput struct{ *pulumi.OutputState }

func (SegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Segment)(nil)).Elem()
}

func (o SegmentOutput) ToSegmentOutput() SegmentOutput {
	return o
}

func (o SegmentOutput) ToSegmentOutputWithContext(ctx context.Context) SegmentOutput {
	return o
}

// The description of the Segment.
func (o SegmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
func (o SegmentOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
func (o SegmentOutput) ParentSegmentToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.ParentSegmentToken }).(pulumi.StringOutput)
}

// The priority of the Segment.
func (o SegmentOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Segment) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The title of the Segment.
func (o SegmentOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Unique segment identifier
func (o SegmentOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Whether or not to track unallocated resources in this Segment.
func (o SegmentOutput) TrackUnallocated() pulumi.BoolOutput {
	return o.ApplyT(func(v *Segment) pulumi.BoolOutput { return v.TrackUnallocated }).(pulumi.BoolOutput)
}

// Workspace token to add the segment to.
func (o SegmentOutput) WorkspaceToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.WorkspaceToken }).(pulumi.StringOutput)
}

type SegmentArrayOutput struct{ *pulumi.OutputState }

func (SegmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Segment)(nil)).Elem()
}

func (o SegmentArrayOutput) ToSegmentArrayOutput() SegmentArrayOutput {
	return o
}

func (o SegmentArrayOutput) ToSegmentArrayOutputWithContext(ctx context.Context) SegmentArrayOutput {
	return o
}

func (o SegmentArrayOutput) Index(i pulumi.IntInput) SegmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Segment {
		return vs[0].([]*Segment)[vs[1].(int)]
	}).(SegmentOutput)
}

type SegmentMapOutput struct{ *pulumi.OutputState }

func (SegmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Segment)(nil)).Elem()
}

func (o SegmentMapOutput) ToSegmentMapOutput() SegmentMapOutput {
	return o
}

func (o SegmentMapOutput) ToSegmentMapOutputWithContext(ctx context.Context) SegmentMapOutput {
	return o
}

func (o SegmentMapOutput) MapIndex(k pulumi.StringInput) SegmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Segment {
		return vs[0].(map[string]*Segment)[vs[1].(string)]
	}).(SegmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentInput)(nil)).Elem(), &Segment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentArrayInput)(nil)).Elem(), SegmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentMapInput)(nil)).Elem(), SegmentMap{})
	pulumi.RegisterOutputType(SegmentOutput{})
	pulumi.RegisterOutputType(SegmentArrayOutput{})
	pulumi.RegisterOutputType(SegmentMapOutput{})
}
