// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vantage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS Account Integration.
type AwsProvider struct {
	pulumi.CustomResourceState

	// Bucket ARN for where CUR data is being stored.
	BucketArn pulumi.StringPtrOutput `pulumi:"bucketArn"`
	// ARN to use for cross account access.
	CrossAccountArn pulumi.StringOutput `pulumi:"crossAccountArn"`
}

// NewAwsProvider registers a new resource with the given unique name, arguments, and options.
func NewAwsProvider(ctx *pulumi.Context,
	name string, args *AwsProviderArgs, opts ...pulumi.ResourceOption) (*AwsProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CrossAccountArn == nil {
		return nil, errors.New("invalid value for required argument 'CrossAccountArn'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AwsProvider
	err := ctx.RegisterResource("vantage:index/awsProvider:AwsProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsProvider gets an existing AwsProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsProviderState, opts ...pulumi.ResourceOption) (*AwsProvider, error) {
	var resource AwsProvider
	err := ctx.ReadResource("vantage:index/awsProvider:AwsProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsProvider resources.
type awsProviderState struct {
	// Bucket ARN for where CUR data is being stored.
	BucketArn *string `pulumi:"bucketArn"`
	// ARN to use for cross account access.
	CrossAccountArn *string `pulumi:"crossAccountArn"`
}

type AwsProviderState struct {
	// Bucket ARN for where CUR data is being stored.
	BucketArn pulumi.StringPtrInput
	// ARN to use for cross account access.
	CrossAccountArn pulumi.StringPtrInput
}

func (AwsProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsProviderState)(nil)).Elem()
}

type awsProviderArgs struct {
	// Bucket ARN for where CUR data is being stored.
	BucketArn *string `pulumi:"bucketArn"`
	// ARN to use for cross account access.
	CrossAccountArn string `pulumi:"crossAccountArn"`
}

// The set of arguments for constructing a AwsProvider resource.
type AwsProviderArgs struct {
	// Bucket ARN for where CUR data is being stored.
	BucketArn pulumi.StringPtrInput
	// ARN to use for cross account access.
	CrossAccountArn pulumi.StringInput
}

func (AwsProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsProviderArgs)(nil)).Elem()
}

type AwsProviderInput interface {
	pulumi.Input

	ToAwsProviderOutput() AwsProviderOutput
	ToAwsProviderOutputWithContext(ctx context.Context) AwsProviderOutput
}

func (*AwsProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsProvider)(nil)).Elem()
}

func (i *AwsProvider) ToAwsProviderOutput() AwsProviderOutput {
	return i.ToAwsProviderOutputWithContext(context.Background())
}

func (i *AwsProvider) ToAwsProviderOutputWithContext(ctx context.Context) AwsProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsProviderOutput)
}

// AwsProviderArrayInput is an input type that accepts AwsProviderArray and AwsProviderArrayOutput values.
// You can construct a concrete instance of `AwsProviderArrayInput` via:
//
//	AwsProviderArray{ AwsProviderArgs{...} }
type AwsProviderArrayInput interface {
	pulumi.Input

	ToAwsProviderArrayOutput() AwsProviderArrayOutput
	ToAwsProviderArrayOutputWithContext(context.Context) AwsProviderArrayOutput
}

type AwsProviderArray []AwsProviderInput

func (AwsProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsProvider)(nil)).Elem()
}

func (i AwsProviderArray) ToAwsProviderArrayOutput() AwsProviderArrayOutput {
	return i.ToAwsProviderArrayOutputWithContext(context.Background())
}

func (i AwsProviderArray) ToAwsProviderArrayOutputWithContext(ctx context.Context) AwsProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsProviderArrayOutput)
}

// AwsProviderMapInput is an input type that accepts AwsProviderMap and AwsProviderMapOutput values.
// You can construct a concrete instance of `AwsProviderMapInput` via:
//
//	AwsProviderMap{ "key": AwsProviderArgs{...} }
type AwsProviderMapInput interface {
	pulumi.Input

	ToAwsProviderMapOutput() AwsProviderMapOutput
	ToAwsProviderMapOutputWithContext(context.Context) AwsProviderMapOutput
}

type AwsProviderMap map[string]AwsProviderInput

func (AwsProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsProvider)(nil)).Elem()
}

func (i AwsProviderMap) ToAwsProviderMapOutput() AwsProviderMapOutput {
	return i.ToAwsProviderMapOutputWithContext(context.Background())
}

func (i AwsProviderMap) ToAwsProviderMapOutputWithContext(ctx context.Context) AwsProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsProviderMapOutput)
}

type AwsProviderOutput struct{ *pulumi.OutputState }

func (AwsProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsProvider)(nil)).Elem()
}

func (o AwsProviderOutput) ToAwsProviderOutput() AwsProviderOutput {
	return o
}

func (o AwsProviderOutput) ToAwsProviderOutputWithContext(ctx context.Context) AwsProviderOutput {
	return o
}

// Bucket ARN for where CUR data is being stored.
func (o AwsProviderOutput) BucketArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsProvider) pulumi.StringPtrOutput { return v.BucketArn }).(pulumi.StringPtrOutput)
}

// ARN to use for cross account access.
func (o AwsProviderOutput) CrossAccountArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsProvider) pulumi.StringOutput { return v.CrossAccountArn }).(pulumi.StringOutput)
}

type AwsProviderArrayOutput struct{ *pulumi.OutputState }

func (AwsProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsProvider)(nil)).Elem()
}

func (o AwsProviderArrayOutput) ToAwsProviderArrayOutput() AwsProviderArrayOutput {
	return o
}

func (o AwsProviderArrayOutput) ToAwsProviderArrayOutputWithContext(ctx context.Context) AwsProviderArrayOutput {
	return o
}

func (o AwsProviderArrayOutput) Index(i pulumi.IntInput) AwsProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsProvider {
		return vs[0].([]*AwsProvider)[vs[1].(int)]
	}).(AwsProviderOutput)
}

type AwsProviderMapOutput struct{ *pulumi.OutputState }

func (AwsProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsProvider)(nil)).Elem()
}

func (o AwsProviderMapOutput) ToAwsProviderMapOutput() AwsProviderMapOutput {
	return o
}

func (o AwsProviderMapOutput) ToAwsProviderMapOutputWithContext(ctx context.Context) AwsProviderMapOutput {
	return o
}

func (o AwsProviderMapOutput) MapIndex(k pulumi.StringInput) AwsProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsProvider {
		return vs[0].(map[string]*AwsProvider)[vs[1].(string)]
	}).(AwsProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsProviderInput)(nil)).Elem(), &AwsProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsProviderArrayInput)(nil)).Elem(), AwsProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsProviderMapInput)(nil)).Elem(), AwsProviderMap{})
	pulumi.RegisterOutputType(AwsProviderOutput{})
	pulumi.RegisterOutputType(AwsProviderArrayOutput{})
	pulumi.RegisterOutputType(AwsProviderMapOutput{})
}
