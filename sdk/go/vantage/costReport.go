// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vantage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a CostReport.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-vantage/sdk/go/vantage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vantage.NewCostReport(ctx, "demoReport", &vantage.CostReportArgs{
//				Filter:      pulumi.String("costs.provider = 'aws'"),
//				FolderToken: pulumi.String("fldr_3555785cd0409118"),
//				SavedFilterTokens: pulumi.StringArray{
//					pulumi.String("svd_fltr_e844a2ccace05933"),
//					pulumi.String("svd_fltr_1b4b80a380ef4ba2"),
//				},
//				Title: pulumi.String("Demo Report"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CostReport struct {
	pulumi.CustomResourceState

	// Filter query to apply to the Cost Report
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// Token of the folder this report resides in.
	FolderToken pulumi.StringOutput `pulumi:"folderToken"`
	// Saved filter tokens to be applied to the report.
	SavedFilterTokens pulumi.StringArrayOutput `pulumi:"savedFilterTokens"`
	// Title of the Cost Report
	Title pulumi.StringOutput `pulumi:"title"`
	// Unique cost report identifier
	Token pulumi.StringOutput `pulumi:"token"`
	// Workspace token to add the cost report to.
	WorkspaceToken pulumi.StringOutput `pulumi:"workspaceToken"`
}

// NewCostReport registers a new resource with the given unique name, arguments, and options.
func NewCostReport(ctx *pulumi.Context,
	name string, args *CostReportArgs, opts ...pulumi.ResourceOption) (*CostReport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CostReport
	err := ctx.RegisterResource("vantage:index/costReport:CostReport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCostReport gets an existing CostReport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCostReport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CostReportState, opts ...pulumi.ResourceOption) (*CostReport, error) {
	var resource CostReport
	err := ctx.ReadResource("vantage:index/costReport:CostReport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CostReport resources.
type costReportState struct {
	// Filter query to apply to the Cost Report
	Filter *string `pulumi:"filter"`
	// Token of the folder this report resides in.
	FolderToken *string `pulumi:"folderToken"`
	// Saved filter tokens to be applied to the report.
	SavedFilterTokens []string `pulumi:"savedFilterTokens"`
	// Title of the Cost Report
	Title *string `pulumi:"title"`
	// Unique cost report identifier
	Token *string `pulumi:"token"`
	// Workspace token to add the cost report to.
	WorkspaceToken *string `pulumi:"workspaceToken"`
}

type CostReportState struct {
	// Filter query to apply to the Cost Report
	Filter pulumi.StringPtrInput
	// Token of the folder this report resides in.
	FolderToken pulumi.StringPtrInput
	// Saved filter tokens to be applied to the report.
	SavedFilterTokens pulumi.StringArrayInput
	// Title of the Cost Report
	Title pulumi.StringPtrInput
	// Unique cost report identifier
	Token pulumi.StringPtrInput
	// Workspace token to add the cost report to.
	WorkspaceToken pulumi.StringPtrInput
}

func (CostReportState) ElementType() reflect.Type {
	return reflect.TypeOf((*costReportState)(nil)).Elem()
}

type costReportArgs struct {
	// Filter query to apply to the Cost Report
	Filter *string `pulumi:"filter"`
	// Token of the folder this report resides in.
	FolderToken *string `pulumi:"folderToken"`
	// Saved filter tokens to be applied to the report.
	SavedFilterTokens []string `pulumi:"savedFilterTokens"`
	// Title of the Cost Report
	Title string `pulumi:"title"`
	// Workspace token to add the cost report to.
	WorkspaceToken *string `pulumi:"workspaceToken"`
}

// The set of arguments for constructing a CostReport resource.
type CostReportArgs struct {
	// Filter query to apply to the Cost Report
	Filter pulumi.StringPtrInput
	// Token of the folder this report resides in.
	FolderToken pulumi.StringPtrInput
	// Saved filter tokens to be applied to the report.
	SavedFilterTokens pulumi.StringArrayInput
	// Title of the Cost Report
	Title pulumi.StringInput
	// Workspace token to add the cost report to.
	WorkspaceToken pulumi.StringPtrInput
}

func (CostReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*costReportArgs)(nil)).Elem()
}

type CostReportInput interface {
	pulumi.Input

	ToCostReportOutput() CostReportOutput
	ToCostReportOutputWithContext(ctx context.Context) CostReportOutput
}

func (*CostReport) ElementType() reflect.Type {
	return reflect.TypeOf((**CostReport)(nil)).Elem()
}

func (i *CostReport) ToCostReportOutput() CostReportOutput {
	return i.ToCostReportOutputWithContext(context.Background())
}

func (i *CostReport) ToCostReportOutputWithContext(ctx context.Context) CostReportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostReportOutput)
}

// CostReportArrayInput is an input type that accepts CostReportArray and CostReportArrayOutput values.
// You can construct a concrete instance of `CostReportArrayInput` via:
//
//	CostReportArray{ CostReportArgs{...} }
type CostReportArrayInput interface {
	pulumi.Input

	ToCostReportArrayOutput() CostReportArrayOutput
	ToCostReportArrayOutputWithContext(context.Context) CostReportArrayOutput
}

type CostReportArray []CostReportInput

func (CostReportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CostReport)(nil)).Elem()
}

func (i CostReportArray) ToCostReportArrayOutput() CostReportArrayOutput {
	return i.ToCostReportArrayOutputWithContext(context.Background())
}

func (i CostReportArray) ToCostReportArrayOutputWithContext(ctx context.Context) CostReportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostReportArrayOutput)
}

// CostReportMapInput is an input type that accepts CostReportMap and CostReportMapOutput values.
// You can construct a concrete instance of `CostReportMapInput` via:
//
//	CostReportMap{ "key": CostReportArgs{...} }
type CostReportMapInput interface {
	pulumi.Input

	ToCostReportMapOutput() CostReportMapOutput
	ToCostReportMapOutputWithContext(context.Context) CostReportMapOutput
}

type CostReportMap map[string]CostReportInput

func (CostReportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CostReport)(nil)).Elem()
}

func (i CostReportMap) ToCostReportMapOutput() CostReportMapOutput {
	return i.ToCostReportMapOutputWithContext(context.Background())
}

func (i CostReportMap) ToCostReportMapOutputWithContext(ctx context.Context) CostReportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostReportMapOutput)
}

type CostReportOutput struct{ *pulumi.OutputState }

func (CostReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostReport)(nil)).Elem()
}

func (o CostReportOutput) ToCostReportOutput() CostReportOutput {
	return o
}

func (o CostReportOutput) ToCostReportOutputWithContext(ctx context.Context) CostReportOutput {
	return o
}

// Filter query to apply to the Cost Report
func (o CostReportOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostReport) pulumi.StringPtrOutput { return v.Filter }).(pulumi.StringPtrOutput)
}

// Token of the folder this report resides in.
func (o CostReportOutput) FolderToken() pulumi.StringOutput {
	return o.ApplyT(func(v *CostReport) pulumi.StringOutput { return v.FolderToken }).(pulumi.StringOutput)
}

// Saved filter tokens to be applied to the report.
func (o CostReportOutput) SavedFilterTokens() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostReport) pulumi.StringArrayOutput { return v.SavedFilterTokens }).(pulumi.StringArrayOutput)
}

// Title of the Cost Report
func (o CostReportOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *CostReport) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Unique cost report identifier
func (o CostReportOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *CostReport) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Workspace token to add the cost report to.
func (o CostReportOutput) WorkspaceToken() pulumi.StringOutput {
	return o.ApplyT(func(v *CostReport) pulumi.StringOutput { return v.WorkspaceToken }).(pulumi.StringOutput)
}

type CostReportArrayOutput struct{ *pulumi.OutputState }

func (CostReportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CostReport)(nil)).Elem()
}

func (o CostReportArrayOutput) ToCostReportArrayOutput() CostReportArrayOutput {
	return o
}

func (o CostReportArrayOutput) ToCostReportArrayOutputWithContext(ctx context.Context) CostReportArrayOutput {
	return o
}

func (o CostReportArrayOutput) Index(i pulumi.IntInput) CostReportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CostReport {
		return vs[0].([]*CostReport)[vs[1].(int)]
	}).(CostReportOutput)
}

type CostReportMapOutput struct{ *pulumi.OutputState }

func (CostReportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CostReport)(nil)).Elem()
}

func (o CostReportMapOutput) ToCostReportMapOutput() CostReportMapOutput {
	return o
}

func (o CostReportMapOutput) ToCostReportMapOutputWithContext(ctx context.Context) CostReportMapOutput {
	return o
}

func (o CostReportMapOutput) MapIndex(k pulumi.StringInput) CostReportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CostReport {
		return vs[0].(map[string]*CostReport)[vs[1].(string)]
	}).(CostReportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CostReportInput)(nil)).Elem(), &CostReport{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostReportArrayInput)(nil)).Elem(), CostReportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostReportMapInput)(nil)).Elem(), CostReportMap{})
	pulumi.RegisterOutputType(CostReportOutput{})
	pulumi.RegisterOutputType(CostReportArrayOutput{})
	pulumi.RegisterOutputType(CostReportMapOutput{})
}
