// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vantage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dashboard.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-vantage/sdk/go/vantage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vantage.NewDashboard(ctx, "demoDashboard", &vantage.DashboardArgs{
//				DateInterval: pulumi.String("last_month"),
//				Title:        pulumi.String("Demo Dashboard"),
//				WidgetTokens: pulumi.StringArray{
//					pulumi.String("rprt_a2846903070824f4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Dashboard struct {
	pulumi.CustomResourceState

	// Determines how to group costs in the Dashboard.
	DateBin pulumi.StringOutput `pulumi:"dateBin"`
	// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
	DateInterval pulumi.StringOutput `pulumi:"dateInterval"`
	// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	EndDate pulumi.StringOutput `pulumi:"endDate"`
	// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// Title of the dashboard
	Title pulumi.StringOutput `pulumi:"title"`
	// Unique dashboard identifier
	Token pulumi.StringOutput `pulumi:"token"`
	// Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
	WidgetTokens pulumi.StringArrayOutput `pulumi:"widgetTokens"`
	// The token for the Workspace the Dashboard is a part of.
	WorkspaceToken pulumi.StringOutput `pulumi:"workspaceToken"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.WidgetTokens == nil {
		return nil, errors.New("invalid value for required argument 'WidgetTokens'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("vantage:index/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("vantage:index/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	// Determines how to group costs in the Dashboard.
	DateBin *string `pulumi:"dateBin"`
	// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
	DateInterval *string `pulumi:"dateInterval"`
	// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	EndDate *string `pulumi:"endDate"`
	// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	StartDate *string `pulumi:"startDate"`
	// Title of the dashboard
	Title *string `pulumi:"title"`
	// Unique dashboard identifier
	Token *string `pulumi:"token"`
	// Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
	WidgetTokens []string `pulumi:"widgetTokens"`
	// The token for the Workspace the Dashboard is a part of.
	WorkspaceToken *string `pulumi:"workspaceToken"`
}

type DashboardState struct {
	// Determines how to group costs in the Dashboard.
	DateBin pulumi.StringPtrInput
	// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
	DateInterval pulumi.StringPtrInput
	// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	EndDate pulumi.StringPtrInput
	// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	StartDate pulumi.StringPtrInput
	// Title of the dashboard
	Title pulumi.StringPtrInput
	// Unique dashboard identifier
	Token pulumi.StringPtrInput
	// Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
	WidgetTokens pulumi.StringArrayInput
	// The token for the Workspace the Dashboard is a part of.
	WorkspaceToken pulumi.StringPtrInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// Determines how to group costs in the Dashboard.
	DateBin *string `pulumi:"dateBin"`
	// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
	DateInterval *string `pulumi:"dateInterval"`
	// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	EndDate *string `pulumi:"endDate"`
	// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	StartDate *string `pulumi:"startDate"`
	// Title of the dashboard
	Title string `pulumi:"title"`
	// Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
	WidgetTokens []string `pulumi:"widgetTokens"`
	// The token for the Workspace the Dashboard is a part of.
	WorkspaceToken *string `pulumi:"workspaceToken"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// Determines how to group costs in the Dashboard.
	DateBin pulumi.StringPtrInput
	// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
	DateInterval pulumi.StringPtrInput
	// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	EndDate pulumi.StringPtrInput
	// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	StartDate pulumi.StringPtrInput
	// Title of the dashboard
	Title pulumi.StringInput
	// Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
	WidgetTokens pulumi.StringArrayInput
	// The token for the Workspace the Dashboard is a part of.
	WorkspaceToken pulumi.StringPtrInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

// DashboardArrayInput is an input type that accepts DashboardArray and DashboardArrayOutput values.
// You can construct a concrete instance of `DashboardArrayInput` via:
//
//	DashboardArray{ DashboardArgs{...} }
type DashboardArrayInput interface {
	pulumi.Input

	ToDashboardArrayOutput() DashboardArrayOutput
	ToDashboardArrayOutputWithContext(context.Context) DashboardArrayOutput
}

type DashboardArray []DashboardInput

func (DashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (i DashboardArray) ToDashboardArrayOutput() DashboardArrayOutput {
	return i.ToDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardArray) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardArrayOutput)
}

// DashboardMapInput is an input type that accepts DashboardMap and DashboardMapOutput values.
// You can construct a concrete instance of `DashboardMapInput` via:
//
//	DashboardMap{ "key": DashboardArgs{...} }
type DashboardMapInput interface {
	pulumi.Input

	ToDashboardMapOutput() DashboardMapOutput
	ToDashboardMapOutputWithContext(context.Context) DashboardMapOutput
}

type DashboardMap map[string]DashboardInput

func (DashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (i DashboardMap) ToDashboardMapOutput() DashboardMapOutput {
	return i.ToDashboardMapOutputWithContext(context.Background())
}

func (i DashboardMap) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardMapOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

// Determines how to group costs in the Dashboard.
func (o DashboardOutput) DateBin() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DateBin }).(pulumi.StringOutput)
}

// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
func (o DashboardOutput) DateInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DateInterval }).(pulumi.StringOutput)
}

// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
func (o DashboardOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.EndDate }).(pulumi.StringOutput)
}

// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
func (o DashboardOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// Title of the dashboard
func (o DashboardOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Unique dashboard identifier
func (o DashboardOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
func (o DashboardOutput) WidgetTokens() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.WidgetTokens }).(pulumi.StringArrayOutput)
}

// The token for the Workspace the Dashboard is a part of.
func (o DashboardOutput) WorkspaceToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.WorkspaceToken }).(pulumi.StringOutput)
}

type DashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (o DashboardArrayOutput) ToDashboardArrayOutput() DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) Index(i pulumi.IntInput) DashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].([]*Dashboard)[vs[1].(int)]
	}).(DashboardOutput)
}

type DashboardMapOutput struct{ *pulumi.OutputState }

func (DashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (o DashboardMapOutput) ToDashboardMapOutput() DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) MapIndex(k pulumi.StringInput) DashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].(map[string]*Dashboard)[vs[1].(string)]
	}).(DashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardArrayInput)(nil)).Elem(), DashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardMapInput)(nil)).Elem(), DashboardMap{})
	pulumi.RegisterOutputType(DashboardOutput{})
	pulumi.RegisterOutputType(DashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardMapOutput{})
}
