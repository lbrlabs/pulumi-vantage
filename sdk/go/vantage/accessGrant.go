// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vantage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AccessGrant.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-vantage/sdk/go/vantage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vantage.NewAccessGrant(ctx, "demoAccessGrant", &vantage.AccessGrantArgs{
//				ResourceToken: pulumi.String("rprt_39d256c871cb6b2b"),
//				TeamToken:     pulumi.String("team_bd5c2d8abc233bfd"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AccessGrant struct {
	pulumi.CustomResourceState

	// Access level of the grant. Must be either `allowed` or `denied`.
	Access pulumi.StringOutput `pulumi:"access"`
	// Token of the resource being granted.
	ResourceToken pulumi.StringOutput `pulumi:"resourceToken"`
	// Token of the team being granted.
	TeamToken pulumi.StringOutput `pulumi:"teamToken"`
	// Token of the access grant.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewAccessGrant registers a new resource with the given unique name, arguments, and options.
func NewAccessGrant(ctx *pulumi.Context,
	name string, args *AccessGrantArgs, opts ...pulumi.ResourceOption) (*AccessGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceToken == nil {
		return nil, errors.New("invalid value for required argument 'ResourceToken'")
	}
	if args.TeamToken == nil {
		return nil, errors.New("invalid value for required argument 'TeamToken'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AccessGrant
	err := ctx.RegisterResource("vantage:index/accessGrant:AccessGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessGrant gets an existing AccessGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessGrantState, opts ...pulumi.ResourceOption) (*AccessGrant, error) {
	var resource AccessGrant
	err := ctx.ReadResource("vantage:index/accessGrant:AccessGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessGrant resources.
type accessGrantState struct {
	// Access level of the grant. Must be either `allowed` or `denied`.
	Access *string `pulumi:"access"`
	// Token of the resource being granted.
	ResourceToken *string `pulumi:"resourceToken"`
	// Token of the team being granted.
	TeamToken *string `pulumi:"teamToken"`
	// Token of the access grant.
	Token *string `pulumi:"token"`
}

type AccessGrantState struct {
	// Access level of the grant. Must be either `allowed` or `denied`.
	Access pulumi.StringPtrInput
	// Token of the resource being granted.
	ResourceToken pulumi.StringPtrInput
	// Token of the team being granted.
	TeamToken pulumi.StringPtrInput
	// Token of the access grant.
	Token pulumi.StringPtrInput
}

func (AccessGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGrantState)(nil)).Elem()
}

type accessGrantArgs struct {
	// Access level of the grant. Must be either `allowed` or `denied`.
	Access *string `pulumi:"access"`
	// Token of the resource being granted.
	ResourceToken string `pulumi:"resourceToken"`
	// Token of the team being granted.
	TeamToken string `pulumi:"teamToken"`
}

// The set of arguments for constructing a AccessGrant resource.
type AccessGrantArgs struct {
	// Access level of the grant. Must be either `allowed` or `denied`.
	Access pulumi.StringPtrInput
	// Token of the resource being granted.
	ResourceToken pulumi.StringInput
	// Token of the team being granted.
	TeamToken pulumi.StringInput
}

func (AccessGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGrantArgs)(nil)).Elem()
}

type AccessGrantInput interface {
	pulumi.Input

	ToAccessGrantOutput() AccessGrantOutput
	ToAccessGrantOutputWithContext(ctx context.Context) AccessGrantOutput
}

func (*AccessGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGrant)(nil)).Elem()
}

func (i *AccessGrant) ToAccessGrantOutput() AccessGrantOutput {
	return i.ToAccessGrantOutputWithContext(context.Background())
}

func (i *AccessGrant) ToAccessGrantOutputWithContext(ctx context.Context) AccessGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGrantOutput)
}

// AccessGrantArrayInput is an input type that accepts AccessGrantArray and AccessGrantArrayOutput values.
// You can construct a concrete instance of `AccessGrantArrayInput` via:
//
//	AccessGrantArray{ AccessGrantArgs{...} }
type AccessGrantArrayInput interface {
	pulumi.Input

	ToAccessGrantArrayOutput() AccessGrantArrayOutput
	ToAccessGrantArrayOutputWithContext(context.Context) AccessGrantArrayOutput
}

type AccessGrantArray []AccessGrantInput

func (AccessGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessGrant)(nil)).Elem()
}

func (i AccessGrantArray) ToAccessGrantArrayOutput() AccessGrantArrayOutput {
	return i.ToAccessGrantArrayOutputWithContext(context.Background())
}

func (i AccessGrantArray) ToAccessGrantArrayOutputWithContext(ctx context.Context) AccessGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGrantArrayOutput)
}

// AccessGrantMapInput is an input type that accepts AccessGrantMap and AccessGrantMapOutput values.
// You can construct a concrete instance of `AccessGrantMapInput` via:
//
//	AccessGrantMap{ "key": AccessGrantArgs{...} }
type AccessGrantMapInput interface {
	pulumi.Input

	ToAccessGrantMapOutput() AccessGrantMapOutput
	ToAccessGrantMapOutputWithContext(context.Context) AccessGrantMapOutput
}

type AccessGrantMap map[string]AccessGrantInput

func (AccessGrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessGrant)(nil)).Elem()
}

func (i AccessGrantMap) ToAccessGrantMapOutput() AccessGrantMapOutput {
	return i.ToAccessGrantMapOutputWithContext(context.Background())
}

func (i AccessGrantMap) ToAccessGrantMapOutputWithContext(ctx context.Context) AccessGrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGrantMapOutput)
}

type AccessGrantOutput struct{ *pulumi.OutputState }

func (AccessGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGrant)(nil)).Elem()
}

func (o AccessGrantOutput) ToAccessGrantOutput() AccessGrantOutput {
	return o
}

func (o AccessGrantOutput) ToAccessGrantOutputWithContext(ctx context.Context) AccessGrantOutput {
	return o
}

// Access level of the grant. Must be either `allowed` or `denied`.
func (o AccessGrantOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGrant) pulumi.StringOutput { return v.Access }).(pulumi.StringOutput)
}

// Token of the resource being granted.
func (o AccessGrantOutput) ResourceToken() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGrant) pulumi.StringOutput { return v.ResourceToken }).(pulumi.StringOutput)
}

// Token of the team being granted.
func (o AccessGrantOutput) TeamToken() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGrant) pulumi.StringOutput { return v.TeamToken }).(pulumi.StringOutput)
}

// Token of the access grant.
func (o AccessGrantOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGrant) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type AccessGrantArrayOutput struct{ *pulumi.OutputState }

func (AccessGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessGrant)(nil)).Elem()
}

func (o AccessGrantArrayOutput) ToAccessGrantArrayOutput() AccessGrantArrayOutput {
	return o
}

func (o AccessGrantArrayOutput) ToAccessGrantArrayOutputWithContext(ctx context.Context) AccessGrantArrayOutput {
	return o
}

func (o AccessGrantArrayOutput) Index(i pulumi.IntInput) AccessGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessGrant {
		return vs[0].([]*AccessGrant)[vs[1].(int)]
	}).(AccessGrantOutput)
}

type AccessGrantMapOutput struct{ *pulumi.OutputState }

func (AccessGrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessGrant)(nil)).Elem()
}

func (o AccessGrantMapOutput) ToAccessGrantMapOutput() AccessGrantMapOutput {
	return o
}

func (o AccessGrantMapOutput) ToAccessGrantMapOutputWithContext(ctx context.Context) AccessGrantMapOutput {
	return o
}

func (o AccessGrantMapOutput) MapIndex(k pulumi.StringInput) AccessGrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessGrant {
		return vs[0].(map[string]*AccessGrant)[vs[1].(string)]
	}).(AccessGrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGrantInput)(nil)).Elem(), &AccessGrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGrantArrayInput)(nil)).Elem(), AccessGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGrantMapInput)(nil)).Elem(), AccessGrantMap{})
	pulumi.RegisterOutputType(AccessGrantOutput{})
	pulumi.RegisterOutputType(AccessGrantArrayOutput{})
	pulumi.RegisterOutputType(AccessGrantMapOutput{})
}
