# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DashboardArgs', 'Dashboard']

@pulumi.input_type
class DashboardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 widget_tokens: pulumi.Input[Sequence[pulumi.Input[str]]],
                 date_bin: Optional[pulumi.Input[str]] = None,
                 date_interval: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 workspace_token: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Dashboard resource.
        :param pulumi.Input[str] title: Title of the dashboard
        :param pulumi.Input[Sequence[pulumi.Input[str]]] widget_tokens: Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        :param pulumi.Input[str] date_bin: Determines how to group costs in the Dashboard.
        :param pulumi.Input[str] date_interval: Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        :param pulumi.Input[str] end_date: The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        :param pulumi.Input[str] start_date: The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        :param pulumi.Input[str] workspace_token: The token for the Workspace the Dashboard is a part of.
        """
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "widget_tokens", widget_tokens)
        if date_bin is not None:
            pulumi.set(__self__, "date_bin", date_bin)
        if date_interval is not None:
            pulumi.set(__self__, "date_interval", date_interval)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if workspace_token is not None:
            pulumi.set(__self__, "workspace_token", workspace_token)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title of the dashboard
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="widgetTokens")
    def widget_tokens(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        """
        return pulumi.get(self, "widget_tokens")

    @widget_tokens.setter
    def widget_tokens(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "widget_tokens", value)

    @property
    @pulumi.getter(name="dateBin")
    def date_bin(self) -> Optional[pulumi.Input[str]]:
        """
        Determines how to group costs in the Dashboard.
        """
        return pulumi.get(self, "date_bin")

    @date_bin.setter
    def date_bin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_bin", value)

    @property
    @pulumi.getter(name="dateInterval")
    def date_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        """
        return pulumi.get(self, "date_interval")

    @date_interval.setter
    def date_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_interval", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        """
        The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        """
        The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="workspaceToken")
    def workspace_token(self) -> Optional[pulumi.Input[str]]:
        """
        The token for the Workspace the Dashboard is a part of.
        """
        return pulumi.get(self, "workspace_token")

    @workspace_token.setter
    def workspace_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_token", value)


@pulumi.input_type
class _DashboardState:
    def __init__(__self__, *,
                 date_bin: Optional[pulumi.Input[str]] = None,
                 date_interval: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 widget_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace_token: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Dashboard resources.
        :param pulumi.Input[str] date_bin: Determines how to group costs in the Dashboard.
        :param pulumi.Input[str] date_interval: Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        :param pulumi.Input[str] end_date: The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        :param pulumi.Input[str] start_date: The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        :param pulumi.Input[str] title: Title of the dashboard
        :param pulumi.Input[str] token: Unique dashboard identifier
        :param pulumi.Input[Sequence[pulumi.Input[str]]] widget_tokens: Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        :param pulumi.Input[str] workspace_token: The token for the Workspace the Dashboard is a part of.
        """
        if date_bin is not None:
            pulumi.set(__self__, "date_bin", date_bin)
        if date_interval is not None:
            pulumi.set(__self__, "date_interval", date_interval)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if widget_tokens is not None:
            pulumi.set(__self__, "widget_tokens", widget_tokens)
        if workspace_token is not None:
            pulumi.set(__self__, "workspace_token", workspace_token)

    @property
    @pulumi.getter(name="dateBin")
    def date_bin(self) -> Optional[pulumi.Input[str]]:
        """
        Determines how to group costs in the Dashboard.
        """
        return pulumi.get(self, "date_bin")

    @date_bin.setter
    def date_bin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_bin", value)

    @property
    @pulumi.getter(name="dateInterval")
    def date_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        """
        return pulumi.get(self, "date_interval")

    @date_interval.setter
    def date_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_interval", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        """
        The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        """
        The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title of the dashboard
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Unique dashboard identifier
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="widgetTokens")
    def widget_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        """
        return pulumi.get(self, "widget_tokens")

    @widget_tokens.setter
    def widget_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "widget_tokens", value)

    @property
    @pulumi.getter(name="workspaceToken")
    def workspace_token(self) -> Optional[pulumi.Input[str]]:
        """
        The token for the Workspace the Dashboard is a part of.
        """
        return pulumi.get(self, "workspace_token")

    @workspace_token.setter
    def workspace_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_token", value)


class Dashboard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 date_bin: Optional[pulumi.Input[str]] = None,
                 date_interval: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 widget_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Dashboard.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_vantage as vantage

        demo_dashboard = vantage.Dashboard("demoDashboard",
            date_interval="last_month",
            title="Demo Dashboard",
            widget_tokens=["rprt_a2846903070824f4"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] date_bin: Determines how to group costs in the Dashboard.
        :param pulumi.Input[str] date_interval: Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        :param pulumi.Input[str] end_date: The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        :param pulumi.Input[str] start_date: The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        :param pulumi.Input[str] title: Title of the dashboard
        :param pulumi.Input[Sequence[pulumi.Input[str]]] widget_tokens: Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        :param pulumi.Input[str] workspace_token: The token for the Workspace the Dashboard is a part of.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Dashboard.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_vantage as vantage

        demo_dashboard = vantage.Dashboard("demoDashboard",
            date_interval="last_month",
            title="Demo Dashboard",
            widget_tokens=["rprt_a2846903070824f4"])
        ```

        :param str resource_name: The name of the resource.
        :param DashboardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 date_bin: Optional[pulumi.Input[str]] = None,
                 date_interval: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 widget_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardArgs.__new__(DashboardArgs)

            __props__.__dict__["date_bin"] = date_bin
            __props__.__dict__["date_interval"] = date_interval
            __props__.__dict__["end_date"] = end_date
            __props__.__dict__["start_date"] = start_date
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            if widget_tokens is None and not opts.urn:
                raise TypeError("Missing required property 'widget_tokens'")
            __props__.__dict__["widget_tokens"] = widget_tokens
            __props__.__dict__["workspace_token"] = workspace_token
            __props__.__dict__["token"] = None
        super(Dashboard, __self__).__init__(
            'vantage:index/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            date_bin: Optional[pulumi.Input[str]] = None,
            date_interval: Optional[pulumi.Input[str]] = None,
            end_date: Optional[pulumi.Input[str]] = None,
            start_date: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            token: Optional[pulumi.Input[str]] = None,
            widget_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            workspace_token: Optional[pulumi.Input[str]] = None) -> 'Dashboard':
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] date_bin: Determines how to group costs in the Dashboard.
        :param pulumi.Input[str] date_interval: Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        :param pulumi.Input[str] end_date: The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        :param pulumi.Input[str] start_date: The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        :param pulumi.Input[str] title: Title of the dashboard
        :param pulumi.Input[str] token: Unique dashboard identifier
        :param pulumi.Input[Sequence[pulumi.Input[str]]] widget_tokens: Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        :param pulumi.Input[str] workspace_token: The token for the Workspace the Dashboard is a part of.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardState.__new__(_DashboardState)

        __props__.__dict__["date_bin"] = date_bin
        __props__.__dict__["date_interval"] = date_interval
        __props__.__dict__["end_date"] = end_date
        __props__.__dict__["start_date"] = start_date
        __props__.__dict__["title"] = title
        __props__.__dict__["token"] = token
        __props__.__dict__["widget_tokens"] = widget_tokens
        __props__.__dict__["workspace_token"] = workspace_token
        return Dashboard(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dateBin")
    def date_bin(self) -> pulumi.Output[str]:
        """
        Determines how to group costs in the Dashboard.
        """
        return pulumi.get(self, "date_bin")

    @property
    @pulumi.getter(name="dateInterval")
    def date_interval(self) -> pulumi.Output[str]:
        """
        Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        """
        return pulumi.get(self, "date_interval")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Output[str]:
        """
        The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Output[str]:
        """
        The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        Title of the dashboard
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        Unique dashboard identifier
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="widgetTokens")
    def widget_tokens(self) -> pulumi.Output[Sequence[str]]:
        """
        Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        """
        return pulumi.get(self, "widget_tokens")

    @property
    @pulumi.getter(name="workspaceToken")
    def workspace_token(self) -> pulumi.Output[str]:
        """
        The token for the Workspace the Dashboard is a part of.
        """
        return pulumi.get(self, "workspace_token")

