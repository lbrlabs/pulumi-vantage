# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AwsProviderArgs', 'AwsProvider']

@pulumi.input_type
class AwsProviderArgs:
    def __init__(__self__, *,
                 cross_account_arn: pulumi.Input[str],
                 bucket_arn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AwsProvider resource.
        :param pulumi.Input[str] cross_account_arn: ARN to use for cross account access.
        :param pulumi.Input[str] bucket_arn: Bucket ARN for where CUR data is being stored.
        """
        pulumi.set(__self__, "cross_account_arn", cross_account_arn)
        if bucket_arn is not None:
            pulumi.set(__self__, "bucket_arn", bucket_arn)

    @property
    @pulumi.getter(name="crossAccountArn")
    def cross_account_arn(self) -> pulumi.Input[str]:
        """
        ARN to use for cross account access.
        """
        return pulumi.get(self, "cross_account_arn")

    @cross_account_arn.setter
    def cross_account_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "cross_account_arn", value)

    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket ARN for where CUR data is being stored.
        """
        return pulumi.get(self, "bucket_arn")

    @bucket_arn.setter
    def bucket_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_arn", value)


@pulumi.input_type
class _AwsProviderState:
    def __init__(__self__, *,
                 bucket_arn: Optional[pulumi.Input[str]] = None,
                 cross_account_arn: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AwsProvider resources.
        :param pulumi.Input[str] bucket_arn: Bucket ARN for where CUR data is being stored.
        :param pulumi.Input[str] cross_account_arn: ARN to use for cross account access.
        """
        if bucket_arn is not None:
            pulumi.set(__self__, "bucket_arn", bucket_arn)
        if cross_account_arn is not None:
            pulumi.set(__self__, "cross_account_arn", cross_account_arn)

    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket ARN for where CUR data is being stored.
        """
        return pulumi.get(self, "bucket_arn")

    @bucket_arn.setter
    def bucket_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_arn", value)

    @property
    @pulumi.getter(name="crossAccountArn")
    def cross_account_arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN to use for cross account access.
        """
        return pulumi.get(self, "cross_account_arn")

    @cross_account_arn.setter
    def cross_account_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cross_account_arn", value)


class AwsProvider(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_arn: Optional[pulumi.Input[str]] = None,
                 cross_account_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages an AWS Account Integration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_arn: Bucket ARN for where CUR data is being stored.
        :param pulumi.Input[str] cross_account_arn: ARN to use for cross account access.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AwsProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an AWS Account Integration.

        :param str resource_name: The name of the resource.
        :param AwsProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AwsProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_arn: Optional[pulumi.Input[str]] = None,
                 cross_account_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AwsProviderArgs.__new__(AwsProviderArgs)

            __props__.__dict__["bucket_arn"] = bucket_arn
            if cross_account_arn is None and not opts.urn:
                raise TypeError("Missing required property 'cross_account_arn'")
            __props__.__dict__["cross_account_arn"] = cross_account_arn
        super(AwsProvider, __self__).__init__(
            'vantage:index/awsProvider:AwsProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket_arn: Optional[pulumi.Input[str]] = None,
            cross_account_arn: Optional[pulumi.Input[str]] = None) -> 'AwsProvider':
        """
        Get an existing AwsProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_arn: Bucket ARN for where CUR data is being stored.
        :param pulumi.Input[str] cross_account_arn: ARN to use for cross account access.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AwsProviderState.__new__(_AwsProviderState)

        __props__.__dict__["bucket_arn"] = bucket_arn
        __props__.__dict__["cross_account_arn"] = cross_account_arn
        return AwsProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> pulumi.Output[Optional[str]]:
        """
        Bucket ARN for where CUR data is being stored.
        """
        return pulumi.get(self, "bucket_arn")

    @property
    @pulumi.getter(name="crossAccountArn")
    def cross_account_arn(self) -> pulumi.Output[str]:
        """
        ARN to use for cross account access.
        """
        return pulumi.get(self, "cross_account_arn")

