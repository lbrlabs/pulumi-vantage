# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SegmentArgs', 'Segment']

@pulumi.input_type
class SegmentArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 parent_segment_token: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 track_unallocated: Optional[pulumi.Input[bool]] = None,
                 workspace_token: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Segment resource.
        :param pulumi.Input[str] title: The title of the Segment.
        :param pulumi.Input[str] description: The description of the Segment.
        :param pulumi.Input[str] filter: The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
        :param pulumi.Input[str] parent_segment_token: The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
        :param pulumi.Input[int] priority: The priority of the Segment.
        :param pulumi.Input[bool] track_unallocated: Whether or not to track unallocated resources in this Segment.
        :param pulumi.Input[str] workspace_token: Workspace token to add the segment to.
        """
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if parent_segment_token is not None:
            pulumi.set(__self__, "parent_segment_token", parent_segment_token)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if track_unallocated is not None:
            pulumi.set(__self__, "track_unallocated", track_unallocated)
        if workspace_token is not None:
            pulumi.set(__self__, "workspace_token", workspace_token)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the Segment.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Segment.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="parentSegmentToken")
    def parent_segment_token(self) -> Optional[pulumi.Input[str]]:
        """
        The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
        """
        return pulumi.get(self, "parent_segment_token")

    @parent_segment_token.setter
    def parent_segment_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_segment_token", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the Segment.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="trackUnallocated")
    def track_unallocated(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to track unallocated resources in this Segment.
        """
        return pulumi.get(self, "track_unallocated")

    @track_unallocated.setter
    def track_unallocated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "track_unallocated", value)

    @property
    @pulumi.getter(name="workspaceToken")
    def workspace_token(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace token to add the segment to.
        """
        return pulumi.get(self, "workspace_token")

    @workspace_token.setter
    def workspace_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_token", value)


@pulumi.input_type
class _SegmentState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 parent_segment_token: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 track_unallocated: Optional[pulumi.Input[bool]] = None,
                 workspace_token: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Segment resources.
        :param pulumi.Input[str] description: The description of the Segment.
        :param pulumi.Input[str] filter: The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
        :param pulumi.Input[str] parent_segment_token: The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
        :param pulumi.Input[int] priority: The priority of the Segment.
        :param pulumi.Input[str] title: The title of the Segment.
        :param pulumi.Input[str] token: Unique segment identifier
        :param pulumi.Input[bool] track_unallocated: Whether or not to track unallocated resources in this Segment.
        :param pulumi.Input[str] workspace_token: Workspace token to add the segment to.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if parent_segment_token is not None:
            pulumi.set(__self__, "parent_segment_token", parent_segment_token)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if track_unallocated is not None:
            pulumi.set(__self__, "track_unallocated", track_unallocated)
        if workspace_token is not None:
            pulumi.set(__self__, "workspace_token", workspace_token)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Segment.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="parentSegmentToken")
    def parent_segment_token(self) -> Optional[pulumi.Input[str]]:
        """
        The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
        """
        return pulumi.get(self, "parent_segment_token")

    @parent_segment_token.setter
    def parent_segment_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_segment_token", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the Segment.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the Segment.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Unique segment identifier
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="trackUnallocated")
    def track_unallocated(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to track unallocated resources in this Segment.
        """
        return pulumi.get(self, "track_unallocated")

    @track_unallocated.setter
    def track_unallocated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "track_unallocated", value)

    @property
    @pulumi.getter(name="workspaceToken")
    def workspace_token(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace token to add the segment to.
        """
        return pulumi.get(self, "workspace_token")

    @workspace_token.setter
    def workspace_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_token", value)


class Segment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 parent_segment_token: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 track_unallocated: Optional[pulumi.Input[bool]] = None,
                 workspace_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Segment.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_vantage as vantage

        demo_segment = vantage.Segment("demoSegment",
            description="This is still a demo segment",
            filter="(costs.provider = 'aws' AND tags.name = NULL)",
            priority=50,
            title="Demo Segment",
            track_unallocated=False)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the Segment.
        :param pulumi.Input[str] filter: The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
        :param pulumi.Input[str] parent_segment_token: The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
        :param pulumi.Input[int] priority: The priority of the Segment.
        :param pulumi.Input[str] title: The title of the Segment.
        :param pulumi.Input[bool] track_unallocated: Whether or not to track unallocated resources in this Segment.
        :param pulumi.Input[str] workspace_token: Workspace token to add the segment to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SegmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Segment.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_vantage as vantage

        demo_segment = vantage.Segment("demoSegment",
            description="This is still a demo segment",
            filter="(costs.provider = 'aws' AND tags.name = NULL)",
            priority=50,
            title="Demo Segment",
            track_unallocated=False)
        ```

        :param str resource_name: The name of the resource.
        :param SegmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SegmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 parent_segment_token: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 track_unallocated: Optional[pulumi.Input[bool]] = None,
                 workspace_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SegmentArgs.__new__(SegmentArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["filter"] = filter
            __props__.__dict__["parent_segment_token"] = parent_segment_token
            __props__.__dict__["priority"] = priority
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["track_unallocated"] = track_unallocated
            __props__.__dict__["workspace_token"] = workspace_token
            __props__.__dict__["token"] = None
        super(Segment, __self__).__init__(
            'vantage:index/segment:Segment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            filter: Optional[pulumi.Input[str]] = None,
            parent_segment_token: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            title: Optional[pulumi.Input[str]] = None,
            token: Optional[pulumi.Input[str]] = None,
            track_unallocated: Optional[pulumi.Input[bool]] = None,
            workspace_token: Optional[pulumi.Input[str]] = None) -> 'Segment':
        """
        Get an existing Segment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the Segment.
        :param pulumi.Input[str] filter: The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
        :param pulumi.Input[str] parent_segment_token: The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
        :param pulumi.Input[int] priority: The priority of the Segment.
        :param pulumi.Input[str] title: The title of the Segment.
        :param pulumi.Input[str] token: Unique segment identifier
        :param pulumi.Input[bool] track_unallocated: Whether or not to track unallocated resources in this Segment.
        :param pulumi.Input[str] workspace_token: Workspace token to add the segment to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SegmentState.__new__(_SegmentState)

        __props__.__dict__["description"] = description
        __props__.__dict__["filter"] = filter
        __props__.__dict__["parent_segment_token"] = parent_segment_token
        __props__.__dict__["priority"] = priority
        __props__.__dict__["title"] = title
        __props__.__dict__["token"] = token
        __props__.__dict__["track_unallocated"] = track_unallocated
        __props__.__dict__["workspace_token"] = workspace_token
        return Segment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the Segment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[str]:
        """
        The filter query language to apply to the Segment. Additional documentation available at https://docs.vantage.sh/vql.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="parentSegmentToken")
    def parent_segment_token(self) -> pulumi.Output[str]:
        """
        The token of the parent Segment this new Segment belongs to. Determines the Workspace the segment is assigned to.
        """
        return pulumi.get(self, "parent_segment_token")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        The priority of the Segment.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        The title of the Segment.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        Unique segment identifier
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="trackUnallocated")
    def track_unallocated(self) -> pulumi.Output[bool]:
        """
        Whether or not to track unallocated resources in this Segment.
        """
        return pulumi.get(self, "track_unallocated")

    @property
    @pulumi.getter(name="workspaceToken")
    def workspace_token(self) -> pulumi.Output[str]:
        """
        Workspace token to add the segment to.
        """
        return pulumi.get(self, "workspace_token")

