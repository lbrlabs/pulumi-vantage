# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TeamArgs', 'Team']

@pulumi.input_type
class TeamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 user_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Team resource.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[str] description: Description of the team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_emails: User emails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_tokens: User tokens.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workspace_tokens: Workspace tokens to add the team to.
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if user_emails is not None:
            pulumi.set(__self__, "user_emails", user_emails)
        if user_tokens is not None:
            pulumi.set(__self__, "user_tokens", user_tokens)
        if workspace_tokens is not None:
            pulumi.set(__self__, "workspace_tokens", workspace_tokens)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the team.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the team.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="userEmails")
    def user_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        User emails.
        """
        return pulumi.get(self, "user_emails")

    @user_emails.setter
    def user_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_emails", value)

    @property
    @pulumi.getter(name="userTokens")
    def user_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        User tokens.
        """
        return pulumi.get(self, "user_tokens")

    @user_tokens.setter
    def user_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_tokens", value)

    @property
    @pulumi.getter(name="workspaceTokens")
    def workspace_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Workspace tokens to add the team to.
        """
        return pulumi.get(self, "workspace_tokens")

    @workspace_tokens.setter
    def workspace_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "workspace_tokens", value)


@pulumi.input_type
class _TeamState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 user_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Team resources.
        :param pulumi.Input[str] description: Description of the team.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[str] token: Unique team identifier.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_emails: User emails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_tokens: User tokens.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workspace_tokens: Workspace tokens to add the team to.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if user_emails is not None:
            pulumi.set(__self__, "user_emails", user_emails)
        if user_tokens is not None:
            pulumi.set(__self__, "user_tokens", user_tokens)
        if workspace_tokens is not None:
            pulumi.set(__self__, "workspace_tokens", workspace_tokens)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the team.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the team.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Unique team identifier.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="userEmails")
    def user_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        User emails.
        """
        return pulumi.get(self, "user_emails")

    @user_emails.setter
    def user_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_emails", value)

    @property
    @pulumi.getter(name="userTokens")
    def user_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        User tokens.
        """
        return pulumi.get(self, "user_tokens")

    @user_tokens.setter
    def user_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_tokens", value)

    @property
    @pulumi.getter(name="workspaceTokens")
    def workspace_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Workspace tokens to add the team to.
        """
        return pulumi.get(self, "workspace_tokens")

    @workspace_tokens.setter
    def workspace_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "workspace_tokens", value)


class Team(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages a Team.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_vantage as vantage

        demo_team = vantage.Team("demoTeam",
            description="Demo Team Description",
            name="Demo Team",
            user_emails=["support@vantage.sh"],
            workspace_tokens=["wrkspc_47c3254c790e9351"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the team.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_emails: User emails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_tokens: User tokens.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workspace_tokens: Workspace tokens to add the team to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Team.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_vantage as vantage

        demo_team = vantage.Team("demoTeam",
            description="Demo Team Description",
            name="Demo Team",
            user_emails=["support@vantage.sh"],
            workspace_tokens=["wrkspc_47c3254c790e9351"])
        ```

        :param str resource_name: The name of the resource.
        :param TeamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamArgs.__new__(TeamArgs)

            __props__.__dict__["description"] = description
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["user_emails"] = user_emails
            __props__.__dict__["user_tokens"] = user_tokens
            __props__.__dict__["workspace_tokens"] = workspace_tokens
            __props__.__dict__["token"] = None
        super(Team, __self__).__init__(
            'vantage:index/team:Team',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            token: Optional[pulumi.Input[str]] = None,
            user_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            user_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            workspace_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Team':
        """
        Get an existing Team resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the team.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[str] token: Unique team identifier.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_emails: User emails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_tokens: User tokens.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workspace_tokens: Workspace tokens to add the team to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamState.__new__(_TeamState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["token"] = token
        __props__.__dict__["user_emails"] = user_emails
        __props__.__dict__["user_tokens"] = user_tokens
        __props__.__dict__["workspace_tokens"] = workspace_tokens
        return Team(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the team.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the team.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        Unique team identifier.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="userEmails")
    def user_emails(self) -> pulumi.Output[Sequence[str]]:
        """
        User emails.
        """
        return pulumi.get(self, "user_emails")

    @property
    @pulumi.getter(name="userTokens")
    def user_tokens(self) -> pulumi.Output[Sequence[str]]:
        """
        User tokens.
        """
        return pulumi.get(self, "user_tokens")

    @property
    @pulumi.getter(name="workspaceTokens")
    def workspace_tokens(self) -> pulumi.Output[Sequence[str]]:
        """
        Workspace tokens to add the team to.
        """
        return pulumi.get(self, "workspace_tokens")

