# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAwsProviderResult',
    'AwaitableGetAwsProviderResult',
    'get_aws_provider',
]

@pulumi.output_type
class GetAwsProviderResult:
    """
    A collection of values returned by getAwsProvider.
    """
    def __init__(__self__, additional_resources_policy=None, autopilot_policy=None, cloudwatch_metrics_policy=None, external_id=None, iam_role_arn=None, id=None, root_policy=None):
        if additional_resources_policy and not isinstance(additional_resources_policy, str):
            raise TypeError("Expected argument 'additional_resources_policy' to be a str")
        pulumi.set(__self__, "additional_resources_policy", additional_resources_policy)
        if autopilot_policy and not isinstance(autopilot_policy, str):
            raise TypeError("Expected argument 'autopilot_policy' to be a str")
        pulumi.set(__self__, "autopilot_policy", autopilot_policy)
        if cloudwatch_metrics_policy and not isinstance(cloudwatch_metrics_policy, str):
            raise TypeError("Expected argument 'cloudwatch_metrics_policy' to be a str")
        pulumi.set(__self__, "cloudwatch_metrics_policy", cloudwatch_metrics_policy)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if iam_role_arn and not isinstance(iam_role_arn, str):
            raise TypeError("Expected argument 'iam_role_arn' to be a str")
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if root_policy and not isinstance(root_policy, str):
            raise TypeError("Expected argument 'root_policy' to be a str")
        pulumi.set(__self__, "root_policy", root_policy)

    @property
    @pulumi.getter(name="additionalResourcesPolicy")
    def additional_resources_policy(self) -> str:
        return pulumi.get(self, "additional_resources_policy")

    @property
    @pulumi.getter(name="autopilotPolicy")
    def autopilot_policy(self) -> str:
        return pulumi.get(self, "autopilot_policy")

    @property
    @pulumi.getter(name="cloudwatchMetricsPolicy")
    def cloudwatch_metrics_policy(self) -> str:
        return pulumi.get(self, "cloudwatch_metrics_policy")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> str:
        return pulumi.get(self, "iam_role_arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="rootPolicy")
    def root_policy(self) -> str:
        return pulumi.get(self, "root_policy")


class AwaitableGetAwsProviderResult(GetAwsProviderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAwsProviderResult(
            additional_resources_policy=self.additional_resources_policy,
            autopilot_policy=self.autopilot_policy,
            cloudwatch_metrics_policy=self.cloudwatch_metrics_policy,
            external_id=self.external_id,
            iam_role_arn=self.iam_role_arn,
            id=self.id,
            root_policy=self.root_policy)


def get_aws_provider(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAwsProviderResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vantage:index/getAwsProvider:getAwsProvider', __args__, opts=opts, typ=GetAwsProviderResult).value

    return AwaitableGetAwsProviderResult(
        additional_resources_policy=__ret__.additional_resources_policy,
        autopilot_policy=__ret__.autopilot_policy,
        cloudwatch_metrics_policy=__ret__.cloudwatch_metrics_policy,
        external_id=__ret__.external_id,
        iam_role_arn=__ret__.iam_role_arn,
        id=__ret__.id,
        root_policy=__ret__.root_policy)
