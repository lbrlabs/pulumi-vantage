// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Vantage
{
    /// <summary>
    /// Manages a Dashboard.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vantage = Lbrlabs.PulumiPackage.Vantage;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demoDashboard = new Vantage.Dashboard("demoDashboard", new()
    ///     {
    ///         DateInterval = "last_month",
    ///         Title = "Demo Dashboard",
    ///         WidgetTokens = new[]
    ///         {
    ///             "rprt_a2846903070824f4",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [VantageResourceType("vantage:index/dashboard:Dashboard")]
    public partial class Dashboard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines how to group costs in the Dashboard.
        /// </summary>
        [Output("dateBin")]
        public Output<string> DateBin { get; private set; } = null!;

        /// <summary>
        /// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        /// </summary>
        [Output("dateInterval")]
        public Output<string> DateInterval { get; private set; } = null!;

        /// <summary>
        /// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        /// </summary>
        [Output("endDate")]
        public Output<string> EndDate { get; private set; } = null!;

        /// <summary>
        /// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        /// </summary>
        [Output("startDate")]
        public Output<string> StartDate { get; private set; } = null!;

        /// <summary>
        /// Title of the dashboard
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Unique dashboard identifier
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        /// </summary>
        [Output("widgetTokens")]
        public Output<ImmutableArray<string>> WidgetTokens { get; private set; } = null!;

        /// <summary>
        /// The token for the Workspace the Dashboard is a part of.
        /// </summary>
        [Output("workspaceToken")]
        public Output<string> WorkspaceToken { get; private set; } = null!;


        /// <summary>
        /// Create a Dashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dashboard(string name, DashboardArgs args, CustomResourceOptions? options = null)
            : base("vantage:index/dashboard:Dashboard", name, args ?? new DashboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dashboard(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
            : base("vantage:index/dashboard:Dashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dashboard Get(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new Dashboard(name, id, state, options);
        }
    }

    public sealed class DashboardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines how to group costs in the Dashboard.
        /// </summary>
        [Input("dateBin")]
        public Input<string>? DateBin { get; set; }

        /// <summary>
        /// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        /// </summary>
        [Input("dateInterval")]
        public Input<string>? DateInterval { get; set; }

        /// <summary>
        /// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// Title of the dashboard
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        [Input("widgetTokens", required: true)]
        private InputList<string>? _widgetTokens;

        /// <summary>
        /// Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        /// </summary>
        public InputList<string> WidgetTokens
        {
            get => _widgetTokens ?? (_widgetTokens = new InputList<string>());
            set => _widgetTokens = value;
        }

        /// <summary>
        /// The token for the Workspace the Dashboard is a part of.
        /// </summary>
        [Input("workspaceToken")]
        public Input<string>? WorkspaceToken { get; set; }

        public DashboardArgs()
        {
        }
        public static new DashboardArgs Empty => new DashboardArgs();
    }

    public sealed class DashboardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines how to group costs in the Dashboard.
        /// </summary>
        [Input("dateBin")]
        public Input<string>? DateBin { get; set; }

        /// <summary>
        /// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
        /// </summary>
        [Input("dateInterval")]
        public Input<string>? DateInterval { get; set; }

        /// <summary>
        /// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// Title of the dashboard
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Unique dashboard identifier
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        [Input("widgetTokens")]
        private InputList<string>? _widgetTokens;

        /// <summary>
        /// Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
        /// </summary>
        public InputList<string> WidgetTokens
        {
            get => _widgetTokens ?? (_widgetTokens = new InputList<string>());
            set => _widgetTokens = value;
        }

        /// <summary>
        /// The token for the Workspace the Dashboard is a part of.
        /// </summary>
        [Input("workspaceToken")]
        public Input<string>? WorkspaceToken { get; set; }

        public DashboardState()
        {
        }
        public static new DashboardState Empty => new DashboardState();
    }
}
