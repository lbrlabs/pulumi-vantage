// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Vantage
{
    /// <summary>
    /// Manages an AccessGrant.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vantage = Lbrlabs.PulumiPackage.Vantage;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demoAccessGrant = new Vantage.AccessGrant("demoAccessGrant", new()
    ///     {
    ///         ResourceToken = "rprt_39d256c871cb6b2b",
    ///         TeamToken = "team_bd5c2d8abc233bfd",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [VantageResourceType("vantage:index/accessGrant:AccessGrant")]
    public partial class AccessGrant : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access level of the grant. Must be either `allowed` or `denied`.
        /// </summary>
        [Output("access")]
        public Output<string> Access { get; private set; } = null!;

        /// <summary>
        /// Token of the resource being granted.
        /// </summary>
        [Output("resourceToken")]
        public Output<string> ResourceToken { get; private set; } = null!;

        /// <summary>
        /// Token of the team being granted.
        /// </summary>
        [Output("teamToken")]
        public Output<string> TeamToken { get; private set; } = null!;

        /// <summary>
        /// Token of the access grant.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;


        /// <summary>
        /// Create a AccessGrant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessGrant(string name, AccessGrantArgs args, CustomResourceOptions? options = null)
            : base("vantage:index/accessGrant:AccessGrant", name, args ?? new AccessGrantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessGrant(string name, Input<string> id, AccessGrantState? state = null, CustomResourceOptions? options = null)
            : base("vantage:index/accessGrant:AccessGrant", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessGrant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessGrant Get(string name, Input<string> id, AccessGrantState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessGrant(name, id, state, options);
        }
    }

    public sealed class AccessGrantArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access level of the grant. Must be either `allowed` or `denied`.
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Token of the resource being granted.
        /// </summary>
        [Input("resourceToken", required: true)]
        public Input<string> ResourceToken { get; set; } = null!;

        /// <summary>
        /// Token of the team being granted.
        /// </summary>
        [Input("teamToken", required: true)]
        public Input<string> TeamToken { get; set; } = null!;

        public AccessGrantArgs()
        {
        }
        public static new AccessGrantArgs Empty => new AccessGrantArgs();
    }

    public sealed class AccessGrantState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access level of the grant. Must be either `allowed` or `denied`.
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Token of the resource being granted.
        /// </summary>
        [Input("resourceToken")]
        public Input<string>? ResourceToken { get; set; }

        /// <summary>
        /// Token of the team being granted.
        /// </summary>
        [Input("teamToken")]
        public Input<string>? TeamToken { get; set; }

        /// <summary>
        /// Token of the access grant.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public AccessGrantState()
        {
        }
        public static new AccessGrantState Empty => new AccessGrantState();
    }
}
