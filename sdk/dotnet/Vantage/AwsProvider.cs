// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Vantage
{
    /// <summary>
    /// Manages an AWS Account Integration.
    /// </summary>
    [VantageResourceType("vantage:index/awsProvider:AwsProvider")]
    public partial class AwsProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Bucket ARN for where CUR data is being stored.
        /// </summary>
        [Output("bucketArn")]
        public Output<string?> BucketArn { get; private set; } = null!;

        /// <summary>
        /// ARN to use for cross account access.
        /// </summary>
        [Output("crossAccountArn")]
        public Output<string> CrossAccountArn { get; private set; } = null!;


        /// <summary>
        /// Create a AwsProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AwsProvider(string name, AwsProviderArgs args, CustomResourceOptions? options = null)
            : base("vantage:index/awsProvider:AwsProvider", name, args ?? new AwsProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AwsProvider(string name, Input<string> id, AwsProviderState? state = null, CustomResourceOptions? options = null)
            : base("vantage:index/awsProvider:AwsProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AwsProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AwsProvider Get(string name, Input<string> id, AwsProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new AwsProvider(name, id, state, options);
        }
    }

    public sealed class AwsProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bucket ARN for where CUR data is being stored.
        /// </summary>
        [Input("bucketArn")]
        public Input<string>? BucketArn { get; set; }

        /// <summary>
        /// ARN to use for cross account access.
        /// </summary>
        [Input("crossAccountArn", required: true)]
        public Input<string> CrossAccountArn { get; set; } = null!;

        public AwsProviderArgs()
        {
        }
        public static new AwsProviderArgs Empty => new AwsProviderArgs();
    }

    public sealed class AwsProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bucket ARN for where CUR data is being stored.
        /// </summary>
        [Input("bucketArn")]
        public Input<string>? BucketArn { get; set; }

        /// <summary>
        /// ARN to use for cross account access.
        /// </summary>
        [Input("crossAccountArn")]
        public Input<string>? CrossAccountArn { get; set; }

        public AwsProviderState()
        {
        }
        public static new AwsProviderState Empty => new AwsProviderState();
    }
}
