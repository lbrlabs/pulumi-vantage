// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vantage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessGrantArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessGrantArgs Empty = new AccessGrantArgs();

    /**
     * Access level of the grant. Must be either `allowed` or `denied`.
     * 
     */
    @Import(name="access")
    private @Nullable Output<String> access;

    /**
     * @return Access level of the grant. Must be either `allowed` or `denied`.
     * 
     */
    public Optional<Output<String>> access() {
        return Optional.ofNullable(this.access);
    }

    /**
     * Token of the resource being granted.
     * 
     */
    @Import(name="resourceToken", required=true)
    private Output<String> resourceToken;

    /**
     * @return Token of the resource being granted.
     * 
     */
    public Output<String> resourceToken() {
        return this.resourceToken;
    }

    /**
     * Token of the team being granted.
     * 
     */
    @Import(name="teamToken", required=true)
    private Output<String> teamToken;

    /**
     * @return Token of the team being granted.
     * 
     */
    public Output<String> teamToken() {
        return this.teamToken;
    }

    private AccessGrantArgs() {}

    private AccessGrantArgs(AccessGrantArgs $) {
        this.access = $.access;
        this.resourceToken = $.resourceToken;
        this.teamToken = $.teamToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessGrantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessGrantArgs $;

        public Builder() {
            $ = new AccessGrantArgs();
        }

        public Builder(AccessGrantArgs defaults) {
            $ = new AccessGrantArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param access Access level of the grant. Must be either `allowed` or `denied`.
         * 
         * @return builder
         * 
         */
        public Builder access(@Nullable Output<String> access) {
            $.access = access;
            return this;
        }

        /**
         * @param access Access level of the grant. Must be either `allowed` or `denied`.
         * 
         * @return builder
         * 
         */
        public Builder access(String access) {
            return access(Output.of(access));
        }

        /**
         * @param resourceToken Token of the resource being granted.
         * 
         * @return builder
         * 
         */
        public Builder resourceToken(Output<String> resourceToken) {
            $.resourceToken = resourceToken;
            return this;
        }

        /**
         * @param resourceToken Token of the resource being granted.
         * 
         * @return builder
         * 
         */
        public Builder resourceToken(String resourceToken) {
            return resourceToken(Output.of(resourceToken));
        }

        /**
         * @param teamToken Token of the team being granted.
         * 
         * @return builder
         * 
         */
        public Builder teamToken(Output<String> teamToken) {
            $.teamToken = teamToken;
            return this;
        }

        /**
         * @param teamToken Token of the team being granted.
         * 
         * @return builder
         * 
         */
        public Builder teamToken(String teamToken) {
            return teamToken(Output.of(teamToken));
        }

        public AccessGrantArgs build() {
            $.resourceToken = Objects.requireNonNull($.resourceToken, "expected parameter 'resourceToken' to be non-null");
            $.teamToken = Objects.requireNonNull($.teamToken, "expected parameter 'teamToken' to be non-null");
            return $;
        }
    }

}
