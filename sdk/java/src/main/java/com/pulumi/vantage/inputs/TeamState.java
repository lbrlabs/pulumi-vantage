// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vantage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamState extends com.pulumi.resources.ResourceArgs {

    public static final TeamState Empty = new TeamState();

    /**
     * Description of the team.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the team.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the team.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the team.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique team identifier.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Unique team identifier.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * User emails.
     * 
     */
    @Import(name="userEmails")
    private @Nullable Output<List<String>> userEmails;

    /**
     * @return User emails.
     * 
     */
    public Optional<Output<List<String>>> userEmails() {
        return Optional.ofNullable(this.userEmails);
    }

    /**
     * User tokens.
     * 
     */
    @Import(name="userTokens")
    private @Nullable Output<List<String>> userTokens;

    /**
     * @return User tokens.
     * 
     */
    public Optional<Output<List<String>>> userTokens() {
        return Optional.ofNullable(this.userTokens);
    }

    /**
     * Workspace tokens to add the team to.
     * 
     */
    @Import(name="workspaceTokens")
    private @Nullable Output<List<String>> workspaceTokens;

    /**
     * @return Workspace tokens to add the team to.
     * 
     */
    public Optional<Output<List<String>>> workspaceTokens() {
        return Optional.ofNullable(this.workspaceTokens);
    }

    private TeamState() {}

    private TeamState(TeamState $) {
        this.description = $.description;
        this.name = $.name;
        this.token = $.token;
        this.userEmails = $.userEmails;
        this.userTokens = $.userTokens;
        this.workspaceTokens = $.workspaceTokens;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamState $;

        public Builder() {
            $ = new TeamState();
        }

        public Builder(TeamState defaults) {
            $ = new TeamState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the team.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the team.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the team.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the team.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param token Unique team identifier.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Unique team identifier.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param userEmails User emails.
         * 
         * @return builder
         * 
         */
        public Builder userEmails(@Nullable Output<List<String>> userEmails) {
            $.userEmails = userEmails;
            return this;
        }

        /**
         * @param userEmails User emails.
         * 
         * @return builder
         * 
         */
        public Builder userEmails(List<String> userEmails) {
            return userEmails(Output.of(userEmails));
        }

        /**
         * @param userEmails User emails.
         * 
         * @return builder
         * 
         */
        public Builder userEmails(String... userEmails) {
            return userEmails(List.of(userEmails));
        }

        /**
         * @param userTokens User tokens.
         * 
         * @return builder
         * 
         */
        public Builder userTokens(@Nullable Output<List<String>> userTokens) {
            $.userTokens = userTokens;
            return this;
        }

        /**
         * @param userTokens User tokens.
         * 
         * @return builder
         * 
         */
        public Builder userTokens(List<String> userTokens) {
            return userTokens(Output.of(userTokens));
        }

        /**
         * @param userTokens User tokens.
         * 
         * @return builder
         * 
         */
        public Builder userTokens(String... userTokens) {
            return userTokens(List.of(userTokens));
        }

        /**
         * @param workspaceTokens Workspace tokens to add the team to.
         * 
         * @return builder
         * 
         */
        public Builder workspaceTokens(@Nullable Output<List<String>> workspaceTokens) {
            $.workspaceTokens = workspaceTokens;
            return this;
        }

        /**
         * @param workspaceTokens Workspace tokens to add the team to.
         * 
         * @return builder
         * 
         */
        public Builder workspaceTokens(List<String> workspaceTokens) {
            return workspaceTokens(Output.of(workspaceTokens));
        }

        /**
         * @param workspaceTokens Workspace tokens to add the team to.
         * 
         * @return builder
         * 
         */
        public Builder workspaceTokens(String... workspaceTokens) {
            return workspaceTokens(List.of(workspaceTokens));
        }

        public TeamState build() {
            return $;
        }
    }

}
