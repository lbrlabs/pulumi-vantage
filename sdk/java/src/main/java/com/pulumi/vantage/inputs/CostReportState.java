// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vantage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CostReportState extends com.pulumi.resources.ResourceArgs {

    public static final CostReportState Empty = new CostReportState();

    /**
     * Filter query to apply to the Cost Report
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return Filter query to apply to the Cost Report
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Token of the folder this report resides in.
     * 
     */
    @Import(name="folderToken")
    private @Nullable Output<String> folderToken;

    /**
     * @return Token of the folder this report resides in.
     * 
     */
    public Optional<Output<String>> folderToken() {
        return Optional.ofNullable(this.folderToken);
    }

    /**
     * Saved filter tokens to be applied to the report.
     * 
     */
    @Import(name="savedFilterTokens")
    private @Nullable Output<List<String>> savedFilterTokens;

    /**
     * @return Saved filter tokens to be applied to the report.
     * 
     */
    public Optional<Output<List<String>>> savedFilterTokens() {
        return Optional.ofNullable(this.savedFilterTokens);
    }

    /**
     * Title of the Cost Report
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Title of the Cost Report
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * Unique cost report identifier
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Unique cost report identifier
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * Workspace token to add the cost report to.
     * 
     */
    @Import(name="workspaceToken")
    private @Nullable Output<String> workspaceToken;

    /**
     * @return Workspace token to add the cost report to.
     * 
     */
    public Optional<Output<String>> workspaceToken() {
        return Optional.ofNullable(this.workspaceToken);
    }

    private CostReportState() {}

    private CostReportState(CostReportState $) {
        this.filter = $.filter;
        this.folderToken = $.folderToken;
        this.savedFilterTokens = $.savedFilterTokens;
        this.title = $.title;
        this.token = $.token;
        this.workspaceToken = $.workspaceToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CostReportState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CostReportState $;

        public Builder() {
            $ = new CostReportState();
        }

        public Builder(CostReportState defaults) {
            $ = new CostReportState(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter Filter query to apply to the Cost Report
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Filter query to apply to the Cost Report
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param folderToken Token of the folder this report resides in.
         * 
         * @return builder
         * 
         */
        public Builder folderToken(@Nullable Output<String> folderToken) {
            $.folderToken = folderToken;
            return this;
        }

        /**
         * @param folderToken Token of the folder this report resides in.
         * 
         * @return builder
         * 
         */
        public Builder folderToken(String folderToken) {
            return folderToken(Output.of(folderToken));
        }

        /**
         * @param savedFilterTokens Saved filter tokens to be applied to the report.
         * 
         * @return builder
         * 
         */
        public Builder savedFilterTokens(@Nullable Output<List<String>> savedFilterTokens) {
            $.savedFilterTokens = savedFilterTokens;
            return this;
        }

        /**
         * @param savedFilterTokens Saved filter tokens to be applied to the report.
         * 
         * @return builder
         * 
         */
        public Builder savedFilterTokens(List<String> savedFilterTokens) {
            return savedFilterTokens(Output.of(savedFilterTokens));
        }

        /**
         * @param savedFilterTokens Saved filter tokens to be applied to the report.
         * 
         * @return builder
         * 
         */
        public Builder savedFilterTokens(String... savedFilterTokens) {
            return savedFilterTokens(List.of(savedFilterTokens));
        }

        /**
         * @param title Title of the Cost Report
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of the Cost Report
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param token Unique cost report identifier
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Unique cost report identifier
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param workspaceToken Workspace token to add the cost report to.
         * 
         * @return builder
         * 
         */
        public Builder workspaceToken(@Nullable Output<String> workspaceToken) {
            $.workspaceToken = workspaceToken;
            return this;
        }

        /**
         * @param workspaceToken Workspace token to add the cost report to.
         * 
         * @return builder
         * 
         */
        public Builder workspaceToken(String workspaceToken) {
            return workspaceToken(Output.of(workspaceToken));
        }

        public CostReportState build() {
            return $;
        }
    }

}
