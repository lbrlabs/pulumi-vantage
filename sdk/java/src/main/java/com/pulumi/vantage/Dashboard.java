// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vantage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vantage.DashboardArgs;
import com.pulumi.vantage.Utilities;
import com.pulumi.vantage.inputs.DashboardState;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Manages a Dashboard.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vantage.Dashboard;
 * import com.pulumi.vantage.DashboardArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demoDashboard = new Dashboard(&#34;demoDashboard&#34;, DashboardArgs.builder()        
 *             .dateInterval(&#34;last_month&#34;)
 *             .title(&#34;Demo Dashboard&#34;)
 *             .widgetTokens(&#34;rprt_a2846903070824f4&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="vantage:index/dashboard:Dashboard")
public class Dashboard extends com.pulumi.resources.CustomResource {
    /**
     * Determines how to group costs in the Dashboard.
     * 
     */
    @Export(name="dateBin", type=String.class, parameters={})
    private Output<String> dateBin;

    /**
     * @return Determines how to group costs in the Dashboard.
     * 
     */
    public Output<String> dateBin() {
        return this.dateBin;
    }
    /**
     * Determines the date range in the Dashboard. Guaranteed to be set to &#39;custom&#39; if &#39;start*date&#39; and &#39;end*date&#39; are set.
     * 
     */
    @Export(name="dateInterval", type=String.class, parameters={})
    private Output<String> dateInterval;

    /**
     * @return Determines the date range in the Dashboard. Guaranteed to be set to &#39;custom&#39; if &#39;start*date&#39; and &#39;end*date&#39; are set.
     * 
     */
    public Output<String> dateInterval() {
        return this.dateInterval;
    }
    /**
     * The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites &#39;date_interval&#39; if set.
     * 
     */
    @Export(name="endDate", type=String.class, parameters={})
    private Output<String> endDate;

    /**
     * @return The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites &#39;date_interval&#39; if set.
     * 
     */
    public Output<String> endDate() {
        return this.endDate;
    }
    /**
     * The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites &#39;date_interval&#39; if set.
     * 
     */
    @Export(name="startDate", type=String.class, parameters={})
    private Output<String> startDate;

    /**
     * @return The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites &#39;date_interval&#39; if set.
     * 
     */
    public Output<String> startDate() {
        return this.startDate;
    }
    /**
     * Title of the dashboard
     * 
     */
    @Export(name="title", type=String.class, parameters={})
    private Output<String> title;

    /**
     * @return Title of the dashboard
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * Unique dashboard identifier
     * 
     */
    @Export(name="token", type=String.class, parameters={})
    private Output<String> token;

    /**
     * @return Unique dashboard identifier
     * 
     */
    public Output<String> token() {
        return this.token;
    }
    /**
     * Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
     * 
     */
    @Export(name="widgetTokens", type=List.class, parameters={String.class})
    private Output<List<String>> widgetTokens;

    /**
     * @return Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
     * 
     */
    public Output<List<String>> widgetTokens() {
        return this.widgetTokens;
    }
    /**
     * The token for the Workspace the Dashboard is a part of.
     * 
     */
    @Export(name="workspaceToken", type=String.class, parameters={})
    private Output<String> workspaceToken;

    /**
     * @return The token for the Workspace the Dashboard is a part of.
     * 
     */
    public Output<String> workspaceToken() {
        return this.workspaceToken;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(String name, DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vantage:index/dashboard:Dashboard", name, args == null ? DashboardArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Dashboard(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vantage:index/dashboard:Dashboard", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
