// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a Dashboard.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vantage from "@lbrlabs/pulumi-vantage";
 *
 * const demoDashboard = new vantage.Dashboard("demoDashboard", {
 *     dateInterval: "last_month",
 *     title: "Demo Dashboard",
 *     widgetTokens: ["rprt_a2846903070824f4"],
 * });
 * ```
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vantage:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * Determines how to group costs in the Dashboard.
     */
    public readonly dateBin!: pulumi.Output<string>;
    /**
     * Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
     */
    public readonly dateInterval!: pulumi.Output<string>;
    /**
     * The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
     */
    public readonly endDate!: pulumi.Output<string>;
    /**
     * The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
     */
    public readonly startDate!: pulumi.Output<string>;
    /**
     * Title of the dashboard
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Unique dashboard identifier
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
     */
    public readonly widgetTokens!: pulumi.Output<string[]>;
    /**
     * The token for the Workspace the Dashboard is a part of.
     */
    public readonly workspaceToken!: pulumi.Output<string>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["dateBin"] = state ? state.dateBin : undefined;
            resourceInputs["dateInterval"] = state ? state.dateInterval : undefined;
            resourceInputs["endDate"] = state ? state.endDate : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["widgetTokens"] = state ? state.widgetTokens : undefined;
            resourceInputs["workspaceToken"] = state ? state.workspaceToken : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.widgetTokens === undefined) && !opts.urn) {
                throw new Error("Missing required property 'widgetTokens'");
            }
            resourceInputs["dateBin"] = args ? args.dateBin : undefined;
            resourceInputs["dateInterval"] = args ? args.dateInterval : undefined;
            resourceInputs["endDate"] = args ? args.endDate : undefined;
            resourceInputs["startDate"] = args ? args.startDate : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["widgetTokens"] = args ? args.widgetTokens : undefined;
            resourceInputs["workspaceToken"] = args ? args.workspaceToken : undefined;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * Determines how to group costs in the Dashboard.
     */
    dateBin?: pulumi.Input<string>;
    /**
     * Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
     */
    dateInterval?: pulumi.Input<string>;
    /**
     * The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
     */
    endDate?: pulumi.Input<string>;
    /**
     * The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
     */
    startDate?: pulumi.Input<string>;
    /**
     * Title of the dashboard
     */
    title?: pulumi.Input<string>;
    /**
     * Unique dashboard identifier
     */
    token?: pulumi.Input<string>;
    /**
     * Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
     */
    widgetTokens?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The token for the Workspace the Dashboard is a part of.
     */
    workspaceToken?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * Determines how to group costs in the Dashboard.
     */
    dateBin?: pulumi.Input<string>;
    /**
     * Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start*date' and 'end*date' are set.
     */
    dateInterval?: pulumi.Input<string>;
    /**
     * The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
     */
    endDate?: pulumi.Input<string>;
    /**
     * The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
     */
    startDate?: pulumi.Input<string>;
    /**
     * Title of the dashboard
     */
    title: pulumi.Input<string>;
    /**
     * Tokens for widgets present in the dashboard. Currently only cost report tokens are supported.
     */
    widgetTokens: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The token for the Workspace the Dashboard is a part of.
     */
    workspaceToken?: pulumi.Input<string>;
}
