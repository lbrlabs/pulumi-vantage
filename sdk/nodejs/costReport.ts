// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a CostReport.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vantage from "@lbrlabs/pulumi-vantage";
 *
 * const demoReport = new vantage.CostReport("demoReport", {
 *     filter: "costs.provider = 'aws'",
 *     folderToken: "fldr_3555785cd0409118",
 *     savedFilterTokens: [
 *         "svd_fltr_e844a2ccace05933",
 *         "svd_fltr_1b4b80a380ef4ba2",
 *     ],
 *     title: "Demo Report",
 * });
 * ```
 */
export class CostReport extends pulumi.CustomResource {
    /**
     * Get an existing CostReport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CostReportState, opts?: pulumi.CustomResourceOptions): CostReport {
        return new CostReport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vantage:index/costReport:CostReport';

    /**
     * Returns true if the given object is an instance of CostReport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CostReport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CostReport.__pulumiType;
    }

    /**
     * Filter query to apply to the Cost Report
     */
    public readonly filter!: pulumi.Output<string | undefined>;
    /**
     * Token of the folder this report resides in.
     */
    public readonly folderToken!: pulumi.Output<string>;
    /**
     * Saved filter tokens to be applied to the report.
     */
    public readonly savedFilterTokens!: pulumi.Output<string[]>;
    /**
     * Title of the Cost Report
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Unique cost report identifier
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Workspace token to add the cost report to.
     */
    public readonly workspaceToken!: pulumi.Output<string>;

    /**
     * Create a CostReport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CostReportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CostReportArgs | CostReportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CostReportState | undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["folderToken"] = state ? state.folderToken : undefined;
            resourceInputs["savedFilterTokens"] = state ? state.savedFilterTokens : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["workspaceToken"] = state ? state.workspaceToken : undefined;
        } else {
            const args = argsOrState as CostReportArgs | undefined;
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["folderToken"] = args ? args.folderToken : undefined;
            resourceInputs["savedFilterTokens"] = args ? args.savedFilterTokens : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["workspaceToken"] = args ? args.workspaceToken : undefined;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CostReport.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CostReport resources.
 */
export interface CostReportState {
    /**
     * Filter query to apply to the Cost Report
     */
    filter?: pulumi.Input<string>;
    /**
     * Token of the folder this report resides in.
     */
    folderToken?: pulumi.Input<string>;
    /**
     * Saved filter tokens to be applied to the report.
     */
    savedFilterTokens?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Title of the Cost Report
     */
    title?: pulumi.Input<string>;
    /**
     * Unique cost report identifier
     */
    token?: pulumi.Input<string>;
    /**
     * Workspace token to add the cost report to.
     */
    workspaceToken?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CostReport resource.
 */
export interface CostReportArgs {
    /**
     * Filter query to apply to the Cost Report
     */
    filter?: pulumi.Input<string>;
    /**
     * Token of the folder this report resides in.
     */
    folderToken?: pulumi.Input<string>;
    /**
     * Saved filter tokens to be applied to the report.
     */
    savedFilterTokens?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Title of the Cost Report
     */
    title: pulumi.Input<string>;
    /**
     * Workspace token to add the cost report to.
     */
    workspaceToken?: pulumi.Input<string>;
}
