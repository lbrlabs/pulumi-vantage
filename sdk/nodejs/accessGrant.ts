// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages an AccessGrant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vantage from "@lbrlabs/pulumi-vantage";
 *
 * const demoAccessGrant = new vantage.AccessGrant("demoAccessGrant", {
 *     resourceToken: "rprt_39d256c871cb6b2b",
 *     teamToken: "team_bd5c2d8abc233bfd",
 * });
 * ```
 */
export class AccessGrant extends pulumi.CustomResource {
    /**
     * Get an existing AccessGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessGrantState, opts?: pulumi.CustomResourceOptions): AccessGrant {
        return new AccessGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vantage:index/accessGrant:AccessGrant';

    /**
     * Returns true if the given object is an instance of AccessGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessGrant.__pulumiType;
    }

    /**
     * Access level of the grant. Must be either `allowed` or `denied`.
     */
    public readonly access!: pulumi.Output<string>;
    /**
     * Token of the resource being granted.
     */
    public readonly resourceToken!: pulumi.Output<string>;
    /**
     * Token of the team being granted.
     */
    public readonly teamToken!: pulumi.Output<string>;
    /**
     * Token of the access grant.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;

    /**
     * Create a AccessGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessGrantArgs | AccessGrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessGrantState | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["resourceToken"] = state ? state.resourceToken : undefined;
            resourceInputs["teamToken"] = state ? state.teamToken : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as AccessGrantArgs | undefined;
            if ((!args || args.resourceToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceToken'");
            }
            if ((!args || args.teamToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamToken'");
            }
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["resourceToken"] = args ? args.resourceToken : undefined;
            resourceInputs["teamToken"] = args ? args.teamToken : undefined;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessGrant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessGrant resources.
 */
export interface AccessGrantState {
    /**
     * Access level of the grant. Must be either `allowed` or `denied`.
     */
    access?: pulumi.Input<string>;
    /**
     * Token of the resource being granted.
     */
    resourceToken?: pulumi.Input<string>;
    /**
     * Token of the team being granted.
     */
    teamToken?: pulumi.Input<string>;
    /**
     * Token of the access grant.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessGrant resource.
 */
export interface AccessGrantArgs {
    /**
     * Access level of the grant. Must be either `allowed` or `denied`.
     */
    access?: pulumi.Input<string>;
    /**
     * Token of the resource being granted.
     */
    resourceToken: pulumi.Input<string>;
    /**
     * Token of the team being granted.
     */
    teamToken: pulumi.Input<string>;
}
